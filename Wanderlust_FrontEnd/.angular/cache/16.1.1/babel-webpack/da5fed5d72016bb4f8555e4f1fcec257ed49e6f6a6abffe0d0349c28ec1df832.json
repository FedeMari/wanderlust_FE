{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let SingoloPostComponent = class SingoloPostComponent {\n  constructor(route, service, serviceUtente, router) {\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.listaImmagini = [];\n    // oggetto categoryColors che serve come mappatura tra le categorie dei post (es. \"Città\", \"Natura\") e le \n    // classi CSS corrispondenti che si desidera applicare \n    this.categoryColors = {\n      'Città': 'badge-primary',\n      'Natura': 'badge-success'\n    };\n    this.isContentExpanded = false;\n  }\n  ngOnInit() {\n    this.service.getAutorePostById(this.post.id_post).subscribe({\n      next: response => {\n        this.autore = response;\n        this.service.getCategoriePostById(this.post.id_post).subscribe({\n          next: responseCategory => {\n            this.categorie = responseCategory;\n            /*  Nel caso di piu categorie\n                \n                const keys = Object.keys(responseCategory);\n                for (let i = 0; i < keys.length; i++) {\n                  const key = keys[i];\n                  this[`categoria${i + 1}`] = responseCategory[key];\n                }\n             *\n             */\n            this.service.getImmaginiPostById(this.post.id_post).subscribe({\n              next: responseImage => {\n                this.listaImmagini = responseImage.immaginiAssociate;\n                for (let i = 0; i < this.listaImmagini.length; i++) {\n                  if (this.immagineURL !== 'null') {\n                    //credo qui vada corretto con this.listaImmagini[i]\n                    this.immagineURL = this.listaImmagini[i].url;\n                    break; // Per assegnare solo la prima immagine non-null\n                  }\n                }\n              },\n\n              error: error => console.log(error)\n            });\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => console.log(error)\n    });\n  }\n  // Se categorie è definito e rappresenta una categoria valida, viene restituito un oggetto con due proprietà \n  // booleane: 'card-category-tag' impostata a true (per applicare lo stile di base al tag della categoria) e la \n  // classe CSS corrispondente all'oggetto categoryColors basato sulla categoria corrente. Se categorie non è \n  // definito o non è una stringa, viene restituito un oggetto con la sola proprietà 'card-category-tag' impostata \n  // a true.\n  getCategoryColors() {\n    return this.categorie && typeof this.categorie === 'string' ? {\n      'card-category-tag': true,\n      [this.categoryColors[this.categorie]]: true\n    } : {\n      'card-category-tag': true\n    };\n  }\n  toggleContentExpand() {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n  dettagliPost(id) {\n    this.router.navigate([\"dettaglipost\", id]);\n  }\n};\n__decorate([Input()], SingoloPostComponent.prototype, \"post\", void 0);\nSingoloPostComponent = __decorate([Component({\n  selector: 'app-singolo-post',\n  templateUrl: './singolo-post.component.html',\n  styleUrls: ['./singolo-post.component.css']\n})], SingoloPostComponent);","map":{"version":3,"names":["Component","Input","SingoloPostComponent","constructor","route","service","serviceUtente","router","listaImmagini","categoryColors","isContentExpanded","ngOnInit","getAutorePostById","post","id_post","subscribe","next","response","autore","getCategoriePostById","responseCategory","categorie","getImmaginiPostById","responseImage","immaginiAssociate","i","length","immagineURL","url","error","console","log","getCategoryColors","toggleContentExpand","dettagliPost","id","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\singolo-post\\singolo-post.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Immagine } from 'src/app/model/immagine/immagine';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-singolo-post',\n  templateUrl: './singolo-post.component.html',\n  styleUrls: ['./singolo-post.component.css']\n})\nexport class SingoloPostComponent implements OnInit{\n  @Input() post?: Post;\n  autore?: String;\n  categorie?: String;\n  listaImmagini: Immagine[] = [];\n  immagineURL?: string;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente: UtenteService , \n    private router: Router) { }\n  \n  ngOnInit(): void {\n    this.service.getAutorePostById(this.post!.id_post!)\n    .subscribe({\n      next: (response) => {\n        this.autore = response;\n\n        this.service.getCategoriePostById(this.post!.id_post!)\n          .subscribe({\n            next: (responseCategory) => {\n              this.categorie = responseCategory;\n              \n              /*  Nel caso di piu categorie\n                  \n                  const keys = Object.keys(responseCategory);\n                  for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this[`categoria${i + 1}`] = responseCategory[key];\n                  }\n               * \n               */\n\n              this.service.getImmaginiPostById(this.post!.id_post!)\n                .subscribe({\n                  next: (responseImage) => {\n                    this.listaImmagini = responseImage.immaginiAssociate!;\n                    for (let i = 0; i < this.listaImmagini.length; i++) {\n                      if(this.immagineURL !== 'null'){ //credo qui vada corretto con this.listaImmagini[i]\n                        this.immagineURL = this.listaImmagini[i].url;\n                        break; // Per assegnare solo la prima immagine non-null\n                      }\n                    }\n                    \n                  },\n                  error: (error) => console.log(error)\n                });                                                 \n            },\n\n            error: (error) => console.log(error)\n          });\n      },\n\n      error: (error) => console.log(error)\n    });\n  }\n\n  // Se categorie è definito e rappresenta una categoria valida, viene restituito un oggetto con due proprietà \n  // booleane: 'card-category-tag' impostata a true (per applicare lo stile di base al tag della categoria) e la \n  // classe CSS corrispondente all'oggetto categoryColors basato sulla categoria corrente. Se categorie non è \n  // definito o non è una stringa, viene restituito un oggetto con la sola proprietà 'card-category-tag' impostata \n  // a true.\n  getCategoryColors(): any {\n    return this.categorie && typeof this.categorie === 'string'\n      ? { 'card-category-tag': true, [this.categoryColors[this.categorie]]: true }\n      : { 'card-category-tag': true };\n  }\n\n  // oggetto categoryColors che serve come mappatura tra le categorie dei post (es. \"Città\", \"Natura\") e le \n  // classi CSS corrispondenti che si desidera applicare \n  categoryColors: { [key: string]: string } = {\n    'Città': 'badge-primary',\n    'Natura': 'badge-success',\n  };\n\n  isContentExpanded: boolean = false;\n\n  toggleContentExpand(): void {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n\n  dettagliPost(id?: number){\n    this.router.navigate([\"dettaglipost\", id]);\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AAajD,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAO/BC,YAAoBC,KAAqB,EAAUC,OAAoB,EAAUC,aAA4B,EACnGC,MAAc;IADJ,KAAAH,KAAK,GAALA,KAAK;IAA0B,KAAAC,OAAO,GAAPA,OAAO;IAAuB,KAAAC,aAAa,GAAbA,aAAa;IACpF,KAAAC,MAAM,GAANA,MAAM;IAJhB,KAAAC,aAAa,GAAe,EAAE;IA8D9B;IACA;IACA,KAAAC,cAAc,GAA8B;MAC1C,OAAO,EAAE,eAAe;MACxB,QAAQ,EAAE;KACX;IAED,KAAAC,iBAAiB,GAAY,KAAK;EAjEN;EAE5BC,QAAQA,CAAA;IACN,IAAI,CAACN,OAAO,CAACO,iBAAiB,CAAC,IAAI,CAACC,IAAK,CAACC,OAAQ,CAAC,CAClDC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACC,MAAM,GAAGD,QAAQ;QAEtB,IAAI,CAACZ,OAAO,CAACc,oBAAoB,CAAC,IAAI,CAACN,IAAK,CAACC,OAAQ,CAAC,CACnDC,SAAS,CAAC;UACTC,IAAI,EAAGI,gBAAgB,IAAI;YACzB,IAAI,CAACC,SAAS,GAAGD,gBAAgB;YAEjC;;;;;;;;;YAUA,IAAI,CAACf,OAAO,CAACiB,mBAAmB,CAAC,IAAI,CAACT,IAAK,CAACC,OAAQ,CAAC,CAClDC,SAAS,CAAC;cACTC,IAAI,EAAGO,aAAa,IAAI;gBACtB,IAAI,CAACf,aAAa,GAAGe,aAAa,CAACC,iBAAkB;gBACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,aAAa,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;kBAClD,IAAG,IAAI,CAACE,WAAW,KAAK,MAAM,EAAC;oBAAE;oBAC/B,IAAI,CAACA,WAAW,GAAG,IAAI,CAACnB,aAAa,CAACiB,CAAC,CAAC,CAACG,GAAG;oBAC5C,MAAM,CAAC;;;cAIb,CAAC;;cACDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;aACpC,CAAC;UACN,CAAC;UAEDA,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;SACpC,CAAC;MACN,CAAC;MAEDA,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;KACpC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACAG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACX,SAAS,IAAI,OAAO,IAAI,CAACA,SAAS,KAAK,QAAQ,GACvD;MAAE,mBAAmB,EAAE,IAAI;MAAE,CAAC,IAAI,CAACZ,cAAc,CAAC,IAAI,CAACY,SAAS,CAAC,GAAG;IAAI,CAAE,GAC1E;MAAE,mBAAmB,EAAE;IAAI,CAAE;EACnC;EAWAY,mBAAmBA,CAAA;IACjB,IAAI,CAACvB,iBAAiB,GAAG,CAAC,IAAI,CAACA,iBAAiB;EAClD;EAEAwB,YAAYA,CAACC,EAAW;IACtB,IAAI,CAAC5B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,cAAc,EAAED,EAAE,CAAC,CAAC;EAC5C;CAED;AAlFUE,UAAA,EAARpC,KAAK,EAAE,C,iDAAa;AADVC,oBAAoB,GAAAmC,UAAA,EALhCrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWtC,oBAAoB,CAmFhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}