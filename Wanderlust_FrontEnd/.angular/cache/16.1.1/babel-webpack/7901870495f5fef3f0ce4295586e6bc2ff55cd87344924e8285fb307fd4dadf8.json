{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { forkJoin } from 'rxjs';\nimport { Utente } from 'src/app/model/utente/utente';\nexport let ListaPostComponent = class ListaPostComponent {\n  constructor(route, service, serviceUtente, router, serviceCategoria) {\n    // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n    // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n    // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n    // del select.\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.serviceCategoria = serviceCategoria;\n    this.listaPost = [];\n    this.utente = new Utente();\n    this.listaPostBackup = [];\n    this.categorie = [];\n    this.listapostPreferiti = [];\n    this.currentPage = 1;\n    this.noPost = false;\n    this.cresc = false;\n    this.espandiFiltri = false;\n    // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n    // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n    // sarà selezionato di default nel select.\n    this.searchCategoria = ''; //risolviamo con valore di Default\n  }\n\n  ngOnInit() {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato'));\n    this.service.getAllPosts().subscribe({\n      next: response => {\n        this.listaPost = response;\n        this.listaPostBackup = response;\n        this.serviceCategoria.getAllCategorie().subscribe({\n          next: data => {\n            data.sort((a, b) => a.nome_categoria.localeCompare(b.nome_categoria)); //ordine alfabetico categorie\n            this.categorie = data;\n            this.serviceUtente.getPreferitiUtenteById(this.utente.id_utente).subscribe({\n              next: risultati => {\n                this.listapostPreferiti = risultati.postPreferiti;\n                this.controlloPreferiti();\n              },\n              error: err => console.log(err)\n            });\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n  aggiungiPreferito(post) {\n    if (post.isFavorite) {\n      this.serviceUtente.removePreferitoUtenteById(post.id_post, this.utente.id_utente).subscribe({\n        next: () => {\n          console.log('Post rimosso con successo.');\n          post.isFavorite = false;\n          return;\n        },\n        error: error => console.log(error)\n      });\n    } else {\n      this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n        next: () => {\n          console.log('Post aggiunto ai preferiti con successo.');\n        },\n        error: error => console.log(error)\n      });\n    }\n  }\n  toggleBookmark(post) {\n    if (post.isFavorite) {\n      this.serviceUtente.removePreferitoUtenteById(post.id_post, this.utente.id_utente).subscribe({\n        next: () => {\n          console.log('Post rimosso con successo.');\n          post.isFavorite = false;\n          return;\n        },\n        error: error => console.log(error)\n      });\n    } else {\n      //if (!post.isFavorite)\n      this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n        next: () => {\n          console.log('Post aggiunto ai preferiti con successo.');\n        },\n        error: error => console.log(error)\n      });\n    }\n  }\n  ricercaPostPerTitolo(key) {\n    console.log(key);\n    const results = [];\n    for (const post of this.listaPost) {\n      if (post.titolo.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.noPost = false;\n      this.listaPost = this.listaPostBackup;\n    }\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    }\n  }\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  ricercaPostPerAutore(key) {\n    console.log(key);\n    //risulta necessario posizionarlo prima\n    if (!key) {\n      this.noPost = false;\n      this.listaPost = this.listaPostBackup;\n    }\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: autori => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        this.listaPost = results;\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ricercaPostPerCategoria(key) {\n    console.log(key);\n    const results = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: categorie => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n          if (this.categoryPost.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ordinamentoPost(tipoOrdinamento) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post - b.id_post);\n    } else if (tipoOrdinamento === 'position' && this.cresc === false) {\n      this.listaPost.sort((a, b) => b.id_post - a.id_post);\n    }\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo.localeCompare(a.titolo));\n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo.localeCompare(b.titolo));\n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder) {\n    if (this.cresc === true) {\n      this.cresc = false;\n    } else if (this.cresc === false) {\n      this.cresc = true;\n    }\n    this.ordinamentoPost(changeOrder);\n  }\n  openFilter() {\n    this.espandiFiltri = true;\n  }\n  closeFilter() {\n    this.espandiFiltri = false;\n  }\n  controlloPreferiti() {\n    for (const postPreferito of this.listapostPreferiti) {\n      const postCorrispondente = this.listaPost.find(post => post.id_post === postPreferito.id_post);\n      if (postCorrispondente) {\n        postCorrispondente.isFavorite = true;\n      }\n    }\n  }\n};\nListaPostComponent = __decorate([Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})], ListaPostComponent);","map":{"version":3,"names":["Component","forkJoin","Utente","ListaPostComponent","constructor","route","service","serviceUtente","router","serviceCategoria","listaPost","utente","listaPostBackup","categorie","listapostPreferiti","currentPage","noPost","cresc","espandiFiltri","searchCategoria","ngOnInit","JSON","parse","sessionStorage","getItem","getAllPosts","subscribe","next","response","getAllCategorie","data","sort","a","b","nome_categoria","localeCompare","getPreferitiUtenteById","id_utente","risultati","postPreferiti","controlloPreferiti","error","err","console","log","alert","message","aggiungiPreferito","post","isFavorite","removePreferitoUtenteById","id_post","addPreferitoUtenteById","toggleBookmark","ricercaPostPerTitolo","key","results","titolo","toLowerCase","indexOf","push","length","ricercaPostPerAutore","observables","map","getAutorePostById","autori","i","autore","trim","ricercaPostPerCategoria","getCategoriePostById","categoryPost","ordinamentoPost","tipoOrdinamento","dateA","Date","getTime","dateB","cambioOrdine","changeOrder","openFilter","closeFilter","postPreferito","postCorrispondente","find","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { Categoria } from 'src/app/model/categoria/categoria';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { CategoriaService } from 'src/app/services/categoria-Service/categoria.service';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n\n@Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})\n\nexport class ListaPostComponent implements OnInit{\n  listaPost: Post[] = [];\n  utente: Utente = new Utente();\n  listaPostBackup: Post[] = [];\n  categorie?: Categoria[] = [];\n  listapostPreferiti: Post[] = [];\n\n  currentPage: number = 1;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente:UtenteService,\n     private router: Router, private serviceCategoria: CategoriaService){\n\n      // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n      // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n      // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n      // del select.\n\n      // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n      // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n      // sarà selezionato di default nel select.\n      this.searchCategoria = ''; //risolviamo con valore di Default\n\n  }\n  ngOnInit(): void {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato')!);\n    this.service.getAllPosts()\n      .subscribe(\n        {\n          next: (response: Post[]) => {\n            this.listaPost = response;\n            this.listaPostBackup = response;\n\n            this.serviceCategoria.getAllCategorie().subscribe({\n              next: data => {\n                data.sort((a, b) => a.nome_categoria!.localeCompare(b.nome_categoria!)); //ordine alfabetico categorie\n                this.categorie = data;\n\n                this.serviceUtente.getPreferitiUtenteById(this.utente!.id_utente!)\n                .subscribe({\n                  next: (risultati) => {\n                    this.listapostPreferiti = risultati.postPreferiti!;\n                    this.controlloPreferiti();\n                  },\n                  error: (err) => console.log(err)\n                })\n              },\n              error: error => console.log(error)\n            })\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        }\n      );\n  }\n\n  aggiungiPreferito(post: Post){\n    if (post.isFavorite) {\n      this.serviceUtente.removePreferitoUtenteById(post.id_post!, this.utente!.id_utente!)\n      .subscribe({\n        next: () => {\n          console.log('Post rimosso con successo.');\n          post.isFavorite = false;\n          return;          \n        },\n        error: error => console.log(error)\n      });\n    } else {\n      this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n      .subscribe({\n        next: () => {\n          console.log('Post aggiunto ai preferiti con successo.');\n        },\n        error: error => console.log(error)\n      });\n    }    \n  }\n\n  toggleBookmark(post: Post){\n    if(post.isFavorite){\n      this.serviceUtente.removePreferitoUtenteById(post.id_post!, this.utente!.id_utente!)\n      .subscribe({\n        next: () => {\n          console.log('Post rimosso con successo.');\n          post.isFavorite = false;\n          return;          \n        },\n        error: error => console.log(error)\n      });\n\n    }else { //if (!post.isFavorite)\n      this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n      .subscribe({\n        next: () => {\n          console.log('Post aggiunto ai preferiti con successo.');\n        },\n        error: error => console.log(error)\n      });\n    }\n  }\n\n   \n\n  \n  \n\n   \n  \n  noPost: boolean = false;\n\n  ricercaPostPerTitolo(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    for (const post of this.listaPost) {\n      if (post.titolo!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.noPost = false;\n      this.listaPost = this.listaPostBackup;\n    }\n\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    }\n  }\n\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  \n  ricercaPostPerAutore(key: string): void {\n    console.log(key);\n\n    //risulta necessario posizionarlo prima\n    if (!key) {\n      this.noPost = false;      \n      this.listaPost = this.listaPostBackup;\n    }\n\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (autori: string[]) => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results: Post[] = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n  \n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        this.listaPost = results;\n        \n        if (results.length === 0  && key) {\n          this.noPost = true;\n        }\n        \n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  categoryPost?: string;\n  searchCategoria?: string;\n  \n  ricercaPostPerCategoria(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (categorie: string[]) => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n\n          if (this.categoryPost!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  orderBy?: string;\n  cresc?: boolean = false;\n\n  ordinamentoPost(tipoOrdinamento: string) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post! - b.id_post!);\n    } else if(tipoOrdinamento === 'position' && this.cresc === false){\n      this.listaPost.sort((a, b) => b.id_post! - a.id_post!);\n    }\n\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo!.localeCompare(a.titolo!)); \n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo!.localeCompare(b.titolo!)); \n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder: string){\n    if(this.cresc === true){\n      this.cresc = false;\n    } else if(this.cresc === false){\n      this.cresc = true;\n    }\n\n    this.ordinamentoPost(changeOrder);\n  }\n\n  espandiFiltri?: boolean = false;\n\n  openFilter(){\n    this.espandiFiltri = true;\n  }\n\n  closeFilter(){\n    this.espandiFiltri = false;\n  }\n\n  controlloPreferiti(){\n    for (const postPreferito of this.listapostPreferiti) {\n      const postCorrispondente = this.listaPost.find(post => post.id_post === postPreferito.id_post);\n      if (postCorrispondente) {\n        postCorrispondente.isFavorite = true;\n      }\n    }\n  }\n    \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}