{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n//Qui sono specificati i file che sono direttamente connessi con questo e quindi \n//accedono direttamente a quanto dichiarato qui\nexport let ListaUtentiComponent = class ListaUtentiComponent {\n  constructor(route, service, router) {\n    this.route = route;\n    this.service = service;\n    this.router = router;\n    this.removeUser = false;\n    this.noUser = false;\n  }\n  //quando viene chiamato il componente esegui il metodo descritto\n  ngOnInit() {\n    this.reloadData();\n  }\n  reloadData() {\n    this.service.getAllUtenti().subscribe({\n      next: response => {\n        this.utenti = response.sort((a, b) => a.cognome.localeCompare(b.cognome));\n        this.utentiBackup = this.utenti;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n  dettagliUtente(id) {\n    this.router.navigate([\"dettagliutente\", id]);\n  }\n  wantToRemoveUser() {\n    this.removeUser = true;\n  }\n  annulla() {\n    this.removeUser = false;\n  }\n  rimuoviUtente(id) {\n    if (id) {\n      this.service.deleteUtenteById(id).subscribe({\n        next: () => {\n          console.log('Utente eliminato con successo.');\n          this.reloadData(); // Aggiorna la lista degli utenti dopo l'eliminazione\n        },\n\n        error: error => console.log(error)\n      });\n    }\n  }\n  goBack() {\n    window.history.back();\n  }\n  ricercaUtentePerCognome(key) {\n    //risulta necessario posizionarlo prima perchè qui a differenza del titolo dobbiamo fare delle chiamate asincrone\n    if (!key) {\n      this.noUser = false;\n      this.utenti = this.utentiBackup;\n    }\n    //costante di appoggio per creare la lista e travasare il risultato in listaPost\n    const results = [];\n    for (let i = 0; i < this.utenti.length; i++) {\n      const user = this.utenti[i].cognome;\n      if (user.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(this.utenti[i]);\n      }\n    }\n    this.utenti = results;\n    if (results.length === 0 && key) {\n      this.noUser = true;\n    }\n  }\n};\nListaUtentiComponent = __decorate([Component({\n  selector: 'app-lista-utenti',\n  templateUrl: './lista-utenti.component.html',\n  styleUrls: ['./lista-utenti.component.css']\n})], ListaUtentiComponent);","map":{"version":3,"names":["Component","ListaUtentiComponent","constructor","route","service","router","removeUser","noUser","ngOnInit","reloadData","getAllUtenti","subscribe","next","response","utenti","sort","a","b","cognome","localeCompare","utentiBackup","error","alert","message","dettagliUtente","id","navigate","wantToRemoveUser","annulla","rimuoviUtente","deleteUtenteById","console","log","goBack","window","history","back","ricercaUtentePerCognome","key","results","i","length","user","toLowerCase","indexOf","push","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-utenti\\lista-utenti.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n//Qui sono specificati i file che sono direttamente connessi con questo e quindi \n//accedono direttamente a quanto dichiarato qui\n@Component({\n  selector: 'app-lista-utenti',\n  templateUrl: './lista-utenti.component.html',\n  styleUrls: ['./lista-utenti.component.css']\n})\nexport class ListaUtentiComponent implements OnInit{\n  utenti?: Utente[];\n  utentiBackup?: Utente[];\n\n  constructor(private route: ActivatedRoute, private service: UtenteService, private router: Router) { }\n\n  //quando viene chiamato il componente esegui il metodo descritto\n  ngOnInit(): void{\n    this.reloadData();\n  }\n\n  reloadData(): void {\n    this.service.getAllUtenti()\n        .subscribe({\n          next: (response: Utente[]) => {\n            this.utenti = response.sort((a,b) => a.cognome!.localeCompare(b.cognome!));\n            this.utentiBackup = this.utenti;\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        });\n  }\n\n  dettagliUtente(id?: number){\n    this.router.navigate([\"dettagliutente\", id]);\n  }\n\n  removeUser: boolean = false;\n\n  wantToRemoveUser(){\n    this.removeUser = true;    \n  }\n\n  annulla(){\n    this.removeUser = false;\n  }\n\n  rimuoviUtente(id?: number){ \n    if (id) {\n      this.service.deleteUtenteById(id).subscribe({\n        next: () => {\n          console.log('Utente eliminato con successo.');\n          this.reloadData(); // Aggiorna la lista degli utenti dopo l'eliminazione\n        },\n        error: error => console.log(error)\n      });\n    }\n  }\n\n  goBack() {\n    window.history.back();\n  }\n\n  noUser?: boolean = false;\n\n  ricercaUtentePerCognome(key: string): void {\n\n    //risulta necessario posizionarlo prima perchè qui a differenza del titolo dobbiamo fare delle chiamate asincrone\n    if (!key) {\n      this.noUser = false;  \n      this.utenti = this.utentiBackup;\n    }\n\n    //costante di appoggio per creare la lista e travasare il risultato in listaPost\n\n    const results: Utente[] = [];\n\n    for (let i = 0; i < this.utenti!.length; i++) {\n      const user = this.utenti![i].cognome;\n\n      if (user!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(this.utenti![i]);\n      }\n    }\n\n    this.utenti = results;\n    \n    if (results.length === 0  && key) {\n      this.noUser = true;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}