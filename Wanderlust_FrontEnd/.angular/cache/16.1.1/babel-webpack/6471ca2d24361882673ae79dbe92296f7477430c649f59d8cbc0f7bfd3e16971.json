{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  // angular dependency injection - di tipo constructor injection\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/api/v2';\n  }\n  addPost(post, utenteId) {\n    return this.http.post(`${this.baseUrl}/add/p/${utenteId}`, post);\n  }\n  getAllPosts() {\n    return this.http.get(`${this.baseUrl}/posts`);\n  }\n  getPostById(postId) {\n    return this.http.get(`${this.baseUrl}/post/${postId}`);\n  }\n  getAutorePostById(postId) {\n    return this.http.get(`${this.baseUrl}/autorePost/${postId}`).pipe(map(response => response.autore));\n  }\n  getCategoriePostById(postId) {\n    return this.http.get(`${this.baseUrl}/categoriepost/${postId}`).pipe(map(response => response.categorie));\n  }\n  getImmaginiPostById(postId) {\n    return this.http.get(`${this.baseUrl}/immaginipost/${postId}`);\n  }\n  updatePost(post, utenteId) {\n    return this.http.put(`${this.baseUrl}/update/p/${utenteId}`, post);\n  }\n  deletePostById(postId) {\n    return this.http.delete(`${this.baseUrl}/delete/p/${postId}`);\n  }\n  addCategoriePostById(postId, categoria) {\n    return this.http.post(`${this.baseUrl}/addcategoria/${postId}`, categoria);\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","PostService","constructor","http","baseUrl","addPost","post","utenteId","getAllPosts","get","getPostById","postId","getAutorePostById","pipe","response","autore","getCategoriePostById","categorie","getImmaginiPostById","updatePost","put","deletePostById","delete","addCategoriePostById","categoria","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\services\\post-Service\\post.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { Categoria } from 'src/app/model/categoria/categoria';\nimport { Post } from 'src/app/model/post/post';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  private baseUrl = 'http://localhost:8080/api/v2';\n  \n  // angular dependency injection - di tipo constructor injection\n  constructor(private http: HttpClient) { }\n\n  addPost(post: Post, utenteId: number): Observable<Post> {\n    return this.http.post<Post>(`${this.baseUrl}/add/p/${utenteId}`, post);\n  }\n\n  public getAllPosts(): Observable<Post[]>{\n    return this.http.get<Post[]>(`${this.baseUrl}/posts`);\n  }\n\n  getPostById(postId: number): Observable<Post>{\n    return this.http.get<Post>(`${this.baseUrl}/post/${postId}`);\n  }\n\n  getAutorePostById(postId: number): Observable<string>{\n    return this.http.get<any>(`${this.baseUrl}/autorePost/${postId}`)\n    .pipe(\n      map(response => response.autore as string)\n    );\n  }\n\n  getCategoriePostById(postId: number): Observable<Post>{\n    return this.http.get<any>(`${this.baseUrl}/categoriepost/${postId}`)\n    .pipe(\n      map(response => response.categorie as string)\n    );\n  }\n\n  getImmaginiPostById(postId: number): Observable<Post>{\n    return this.http.get<Post>(`${this.baseUrl}/immaginipost/${postId}`);\n  }\n\n  updatePost(post: Post, utenteId: number): Observable<Post> {\n    return this.http.put<Post>(`${this.baseUrl}/update/p/${utenteId}`, post);\n  }\n\n  deletePostById(postId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/delete/p/${postId}`);\n  }\n\n  addCategoriePostById(postId: number, categoria: Categoria): Observable<Post> {\n    return this.http.post<Post>(`${this.baseUrl}/addcategoria/${postId}`, categoria);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAOtC,OAAM,MAAOC,WAAW;EAItB;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,8BAA8B;EAGR;EAExCC,OAAOA,CAACC,IAAU,EAAEC,QAAgB;IAClC,OAAO,IAAI,CAACJ,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACF,OAAO,UAAUG,QAAQ,EAAE,EAAED,IAAI,CAAC;EACxE;EAEOE,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,QAAQ,CAAC;EACvD;EAEAM,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAO,GAAG,IAAI,CAACL,OAAO,SAASO,MAAM,EAAE,CAAC;EAC9D;EAEAC,iBAAiBA,CAACD,MAAc;IAC9B,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACL,OAAO,eAAeO,MAAM,EAAE,CAAC,CAChEE,IAAI,CACHb,GAAG,CAACc,QAAQ,IAAIA,QAAQ,CAACC,MAAgB,CAAC,CAC3C;EACH;EAEAC,oBAAoBA,CAACL,MAAc;IACjC,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACL,OAAO,kBAAkBO,MAAM,EAAE,CAAC,CACnEE,IAAI,CACHb,GAAG,CAACc,QAAQ,IAAIA,QAAQ,CAACG,SAAmB,CAAC,CAC9C;EACH;EAEAC,mBAAmBA,CAACP,MAAc;IAChC,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAO,GAAG,IAAI,CAACL,OAAO,iBAAiBO,MAAM,EAAE,CAAC;EACtE;EAEAQ,UAAUA,CAACb,IAAU,EAAEC,QAAgB;IACrC,OAAO,IAAI,CAACJ,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,OAAO,aAAaG,QAAQ,EAAE,EAAED,IAAI,CAAC;EAC1E;EAEAe,cAAcA,CAACV,MAAc;IAC3B,OAAO,IAAI,CAACR,IAAI,CAACmB,MAAM,CAAO,GAAG,IAAI,CAAClB,OAAO,aAAaO,MAAM,EAAE,CAAC;EACrE;EAEAY,oBAAoBA,CAACZ,MAAc,EAAEa,SAAoB;IACvD,OAAO,IAAI,CAACrB,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACF,OAAO,iBAAiBO,MAAM,EAAE,EAAEa,SAAS,CAAC;EAClF;;AA/CWvB,WAAW,C;mBAAXA,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX3B,WAAW,C;SAAXA,WAAW;EAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}