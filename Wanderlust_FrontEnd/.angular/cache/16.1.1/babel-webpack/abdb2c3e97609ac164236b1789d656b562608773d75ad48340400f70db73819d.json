{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/post-Service/post.service\";\nimport * as i3 from \"src/app/services/utente-Service/utente.service\";\nimport * as i4 from \"@angular/common\";\nfunction SingoloPostComponent_img_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.immagineURL, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class SingoloPostComponent {\n  constructor(route, service, serviceUtente, router) {\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.listaImmagini = [];\n    this.isContentExpanded = false;\n  }\n  ngOnInit() {\n    this.service.getAutorePostById(this.post.id_post).subscribe({\n      next: response => {\n        this.autore = response;\n        this.service.getCategoriePostById(this.post.id_post).subscribe({\n          next: responseCategory => {\n            this.categorie = responseCategory;\n            /*  Nel caso di piu categorie\n                \n                const keys = Object.keys(responseCategory);\n                for (let i = 0; i < keys.length; i++) {\n                  const key = keys[i];\n                  this[`categoria${i + 1}`] = responseCategory[key];\n                }\n             *\n             */\n            this.service.getImmaginiPostById(this.post.id_post).subscribe({\n              next: responseImage => {\n                this.listaImmagini = responseImage.immaginiAssociate;\n                for (let i = 0; i < this.listaImmagini.length; i++) {\n                  if (this.immagineURL !== 'null') {\n                    this.immagineURL = this.listaImmagini[i].url;\n                    break; // Per assegnare solo la prima immagine non-null\n                  }\n                }\n              },\n\n              error: error => console.log(error)\n            });\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => console.log(error)\n    });\n  }\n  toggleContentExpand() {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n  openPost() {}\n}\nSingoloPostComponent.ɵfac = function SingoloPostComponent_Factory(t) {\n  return new (t || SingoloPostComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.UtenteService), i0.ɵɵdirectiveInject(i1.Router));\n};\nSingoloPostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SingoloPostComponent,\n  selectors: [[\"app-singolo-post\"]],\n  inputs: {\n    post: \"post\"\n  },\n  decls: 17,\n  vars: 11,\n  consts: [[\"id\", \"contenuto-post\"], [1, \"col\"], [1, \"card\", 3, \"click\"], [\"class\", \"card-img-top\", \"alt\", \"Image\", 3, \"src\", 4, \"ngIf\"], [1, \"card-header\"], [1, \"card-data\"], [1, \"card-title\"], [1, \"card-writer\"], [1, \"card-body\"], [1, \"card-text\"], [\"alt\", \"Image\", 1, \"card-img-top\", 3, \"src\"]],\n  template: function SingoloPostComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵlistener(\"click\", function SingoloPostComponent_Template_div_click_2_listener() {\n        return ctx.openPost();\n      });\n      i0.ɵɵtemplate(3, SingoloPostComponent_img_3_Template, 1, 1, \"img\", 3);\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"h6\", 5);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"h6\", 5);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"h5\", 6);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"h5\", 7);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 8)(14, \"p\", 9);\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"slice\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.immagineURL);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.post == null ? null : ctx.post.data);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.categorie);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.post == null ? null : ctx.post.titolo);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.autore);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind3(16, 7, ctx.post == null ? null : ctx.post.contenuto, 0, 200), \"\", (ctx.post == null ? null : ctx.post.contenuto.length) > 100 ? \"...\" : \"\", \"\");\n    }\n  },\n  dependencies: [i4.NgIf, i4.SlicePipe],\n  styles: [\"#contenuto-post[_ngcontent-%COMP%] {\\n    padding-top: 20px;\\n    padding-bottom: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zaW5nb2xvLXBvc3Qvc2luZ29sby1wb3N0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsb0JBQW9CO0FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRlbnV0by1wb3N0IHtcclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["i0","ɵɵelement","ɵɵproperty","ctx_r0","immagineURL","ɵɵsanitizeUrl","SingoloPostComponent","constructor","route","service","serviceUtente","router","listaImmagini","isContentExpanded","ngOnInit","getAutorePostById","post","id_post","subscribe","next","response","autore","getCategoriePostById","responseCategory","categorie","getImmaginiPostById","responseImage","immaginiAssociate","i","length","url","error","console","log","toggleContentExpand","openPost","ɵɵdirectiveInject","i1","ActivatedRoute","i2","PostService","i3","UtenteService","Router","selectors","inputs","decls","vars","consts","template","SingoloPostComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","SingoloPostComponent_Template_div_click_2_listener","ɵɵtemplate","SingoloPostComponent_img_3_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","data","titolo","ɵɵtextInterpolate2","ɵɵpipeBind3","contenuto"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\singolo-post\\singolo-post.component.ts","C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\singolo-post\\singolo-post.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Immagine } from 'src/app/model/immagine/immagine';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-singolo-post',\n  templateUrl: './singolo-post.component.html',\n  styleUrls: ['./singolo-post.component.css']\n})\nexport class SingoloPostComponent implements OnInit{\n  @Input() post?: Post;\n  autore?: String;\n  categorie?: String;\n  listaImmagini: Immagine[] = [];\n  immagineURL?: string;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente: UtenteService , \n    private router: Router) { }\n  \n  ngOnInit(): void {\n    this.service.getAutorePostById(this.post!.id_post!)\n    .subscribe({\n      next: (response) => {\n        this.autore = response;\n\n        this.service.getCategoriePostById(this.post!.id_post!)\n          .subscribe({\n            next: (responseCategory) => {\n              this.categorie = responseCategory;\n              \n              /*  Nel caso di piu categorie\n                  \n                  const keys = Object.keys(responseCategory);\n                  for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this[`categoria${i + 1}`] = responseCategory[key];\n                  }\n               * \n               */\n\n              this.service.getImmaginiPostById(this.post!.id_post!)\n                .subscribe({\n                  next: (responseImage) => {\n                    this.listaImmagini = responseImage.immaginiAssociate!;\n                    for (let i = 0; i < this.listaImmagini.length; i++) {\n                      if(this.immagineURL !== 'null'){\n                        this.immagineURL = this.listaImmagini[i].url;\n                        break; // Per assegnare solo la prima immagine non-null\n                      }\n                    }\n                    \n                  },\n                  error: (error) => console.log(error)\n                });                                                 \n            },\n\n            error: (error) => console.log(error)\n          });\n      },\n\n      error: (error) => console.log(error)\n    });\n  }\n\n  isContentExpanded: boolean = false;\n\n  toggleContentExpand(): void {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n\n  openPost(){\n    \n  }\n\n}\n","<!-- <div id=\"contenuto-post\">\n\n    <div class=\"col\">\n      <div class=\"card\">\n\n        <img *ngIf=\"immagineURL\" [src]=\"immagineURL\" class=\"card-img-top\" alt=\"Image\"/>\n  \n        <div class=\"card-header\">\n          <h6 class=\"card-data\">{{post?.data}}</h6>\n          <h6 class=\"card-data\">{{categorie}}</h6>\n          <h5 class=\"card-title\">{{post?.titolo}}</h5>\n          <h5 class=\"card-writer\">{{autore}}</h5>        \n        </div>\n  \n        <div class=\"card-body\">\n          <p class=\"card-text\">{{post?.contenuto}}</p>\n        </div>\n  \n      </div>\n    </div>\n    \n</div> -->\n\n<div id=\"contenuto-post\">\n  <div class=\"col\">\n    <div class=\"card\" (click)=\"openPost()\">\n      <img *ngIf=\"immagineURL\" [src]=\"immagineURL\" class=\"card-img-top\" alt=\"Image\"/>\n\n      <div class=\"card-header\">\n        <h6 class=\"card-data\">{{post?.data}}</h6>\n        <h6 class=\"card-data\">{{categorie}}</h6>\n        <h5 class=\"card-title\">{{post?.titolo}}</h5>\n        <h5 class=\"card-writer\">{{autore}}</h5>        \n      </div>\n\n      <div class=\"card-body\">\n        <!-- Indichiamo di mostrare il contenuto del post, ma se il contenuto del testo supera i 100 caratteri \n        di mostrare poi i \"...\" per indicare che il testo continua e al click sulla card aprire la pagina di-->\n        <p class=\"card-text\">{{post?.contenuto | slice:0:200}}{{post?.contenuto!.length > 100 ? '...' : ''}}</p>\n      </div>\n\n    </div>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}