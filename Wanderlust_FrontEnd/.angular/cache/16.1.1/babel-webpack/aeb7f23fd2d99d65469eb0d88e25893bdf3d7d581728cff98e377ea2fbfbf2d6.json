{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { Utente } from 'src/app/model/utente/utente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/post-Service/post.service\";\nimport * as i3 from \"src/app/services/utente-Service/utente.service\";\nimport * as i4 from \"src/app/services/categoria-Service/categoria.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"ngx-pagination\";\nimport * as i8 from \"../singolo-post/singolo-post.component\";\nfunction ListaPostComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"option\", 34);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const categoria_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", categoria_r8.nome_categoria);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(categoria_r8.nome_categoria);\n  }\n}\nfunction ListaPostComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_35_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.cambioOrdine(ctx_r9.orderBy));\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 36);\n    i0.ɵɵelement(2, \"path\", 37);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_36_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.cambioOrdine(ctx_r11.orderBy));\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 36);\n    i0.ɵɵelement(2, \"path\", 38);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39)(1, \"div\", 40)(2, \"h4\", 41);\n    i0.ɵɵtext(3, \"NESSUN ARTICOLO TROVATO!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"No Posts were found.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ListaPostComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42)(1, \"p\");\n    i0.ɵɵtext(2, \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_47_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_47_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const post_r13 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.aggiungiPreferito(post_r13));\n    });\n    i0.ɵɵtext(2, \"Aggiungi ai Preferiti\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelement(1, \"app-singolo-post\", 44);\n    i0.ɵɵtemplate(2, ListaPostComponent_div_47_div_2_Template, 3, 0, \"div\", 45);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const post_r13 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"post\", post_r13);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.utente);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"no-posts\": a0\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    itemsPerPage: 9,\n    currentPage: a1\n  };\n};\nexport class ListaPostComponent {\n  constructor(route, service, serviceUtente, router, serviceCategoria) {\n    // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n    // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n    // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n    // del select.\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.serviceCategoria = serviceCategoria;\n    this.listaPost = [];\n    this.utente = new Utente();\n    this.listaPostBackup = [];\n    this.categorie = [];\n    this.currentPage = 1;\n    this.noPost = false;\n    this.cresc = false;\n    this.filtri = false;\n    // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n    // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n    // sarà selezionato di default nel select.\n    this.searchCategoria = ''; //risolviamo con valore di Default\n  }\n\n  ngOnInit() {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato'));\n    this.service.getAllPosts().subscribe({\n      next: response => {\n        this.listaPost = response;\n        this.listaPostBackup = response;\n        this.serviceCategoria.getAllCategorie().subscribe({\n          next: data => {\n            console.log(data);\n            this.categorie = data;\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n    const coll = document.getElementsByClassName(\"collapsible\");\n    for (let i = 0; i < coll.length; i++) {\n      const element = coll[i];\n      element.addEventListener(\"click\", () => {\n        element.classList.toggle(\"active\");\n        const content = element.nextElementSibling;\n        if (content?.style.display === \"block\") {\n          content.style.display = \"none\";\n        } else {\n          content.style.display = \"block\";\n        }\n      });\n    }\n  }\n  aggiungiPreferito(post) {\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/', 'listapost']).then(() => window.location.reload());\n      },\n      error: error => console.log(error)\n    });\n  }\n  ricercaPostPerTitolo(key) {\n    console.log(key);\n    const results = [];\n    for (const post of this.listaPost) {\n      if (post.titolo.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  ricercaPostPerAutore(key) {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: autori => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        this.listaPost = results;\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ricercaPostPerCategoria(key) {\n    console.log(key);\n    const results = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: categorie => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n          if (this.categoryPost.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ordinamentoPost(tipoOrdinamento) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post - b.id_post);\n    } else if (tipoOrdinamento === 'position' && this.cresc === false) {\n      this.listaPost.sort((a, b) => b.id_post - a.id_post);\n    }\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo.localeCompare(a.titolo));\n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo.localeCompare(b.titolo));\n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder) {\n    if (this.cresc === true) {\n      this.cresc = false;\n    } else if (this.cresc === false) {\n      this.cresc = true;\n    }\n    this.ordinamentoPost(changeOrder);\n  }\n  openFilter() {\n    this.filtri = true;\n  }\n  closeFilter() {\n    this.filtri = false;\n  }\n}\nListaPostComponent.ɵfac = function ListaPostComponent_Factory(t) {\n  return new (t || ListaPostComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.UtenteService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.CategoriaService));\n};\nListaPostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListaPostComponent,\n  selectors: [[\"app-lista-post\"]],\n  decls: 51,\n  vars: 15,\n  consts: [[\"id\", \"wrapper\"], [1, \"page-header\"], [1, \"h1\", \"page-title\"], [1, \"d-flex\"], [2, \"padding-left\", \"200px\", \"padding-right\", \"20px\"], [1, \"form-inline\", \"my-2\", \"my-lg-0\", 2, \"display\", \"inline\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key\", \"id\", \"searchTitolo\", \"placeholder\", \"Ricerca per Titolo\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key\", \"ngModel\"], [2, \"padding-right\", \"20px\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key2\", \"id\", \"searchAutore\", \"placeholder\", \"Ricerca per Autore\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key2\", \"ngModel\"], [\"name\", \"subject\", \"aria-label\", \"Subject\", \"required\", \"\", \"id\", \"selectCategoria\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\", \"hidden\", \"\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"button-16\", 3, \"click\"], [1, \"toolbar-sorter\", \"sorter\"], [\"for\", \"sorter\", 1, \"sorter-label\"], [\"id\", \"sorter\", \"data-role\", \"sorter\", \"required\", \"\", 1, \"sorter-options\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"value\", \"position\", \"selected\", \"selected\"], [\"value\", \"name\"], [\"value\", \"date\"], [\"style\", \"cursor: pointer;\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"col-lg-12 col-md-12 col-xl-12\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"collapsible\", 3, \"click\"], [\"class\", \"content\", 4, \"ng\"], [1, \"filter-posts-container\"], [1, \"filters-column\"], [1, \"posts-column\"], [1, \"container\", 3, \"ngClass\"], [1, \"row\"], [\"class\", \"col-12 col-md-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"pagination-container\"], [3, \"pageChange\"], [3, \"ngValue\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"height\", \"1em\", \"viewBox\", \"0 0 448 512\"], [\"d\", \"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\"], [\"d\", \"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"], [1, \"col-lg-12\", \"col-md-12\", \"col-xl-12\"], [\"role\", \"alert\", 1, \"alert\", \"alert-info\"], [1, \"alert-heading\"], [1, \"content\"], [1, \"col-12\", \"col-md-4\"], [3, \"post\"], [\"id\", \"contenuto\", \"style\", \"margin-left: 5px;\", 4, \"ngIf\"], [\"id\", \"contenuto\", 2, \"margin-left\", \"5px\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"]],\n  template: function ListaPostComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r18 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"header\", 1)(2, \"h1\", 2)(3, \"span\");\n      i0.ɵɵtext(4, \"I Racconti dei Viaggiatori\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"form\", 5)(8, \"input\", 6, 7);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_8_listener() {\n        i0.ɵɵrestoreView(_r18);\n        const _r0 = i0.ɵɵreference(9);\n        return i0.ɵɵresetView(ctx.ricercaPostPerTitolo(_r0.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"form\", 5)(12, \"input\", 9, 10);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_12_listener() {\n        i0.ɵɵrestoreView(_r18);\n        const _r1 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(ctx.ricercaPostPerAutore(_r1.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"div\", 8)(15, \"form\", 5)(16, \"select\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_select_ngModelChange_16_listener($event) {\n        return ctx.searchCategoria = $event;\n      });\n      i0.ɵɵelementStart(17, \"option\", 12);\n      i0.ɵɵtext(18, \"Ricerca per Categoria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"option\", 13);\n      i0.ɵɵtext(20, \"Seleziona una Categoria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, ListaPostComponent_ng_container_21_Template, 3, 2, \"ng-container\", 14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\")(23, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function ListaPostComponent_Template_button_click_23_listener() {\n        return ctx.ricercaPostPerCategoria(ctx.searchCategoria);\n      });\n      i0.ɵɵtext(24, \"Cerca\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 16)(26, \"label\", 17);\n      i0.ɵɵtext(27, \"Ordina per\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"select\", 18);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_select_ngModelChange_28_listener($event) {\n        return ctx.orderBy = $event;\n      })(\"change\", function ListaPostComponent_Template_select_change_28_listener() {\n        return ctx.ordinamentoPost(ctx.orderBy);\n      });\n      i0.ɵɵelementStart(29, \"option\", 19);\n      i0.ɵɵtext(30, \"Posizione\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"option\", 20);\n      i0.ɵɵtext(32, \"Titolo Articolo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"option\", 21);\n      i0.ɵɵtext(34, \"Data Inserimento\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(35, ListaPostComponent_div_35_Template, 3, 0, \"div\", 22);\n      i0.ɵɵtemplate(36, ListaPostComponent_div_36_Template, 3, 0, \"div\", 22);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(37, ListaPostComponent_div_37_Template, 6, 0, \"div\", 23);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\")(39, \"button\", 24);\n      i0.ɵɵlistener(\"click\", function ListaPostComponent_Template_button_click_39_listener() {\n        return ctx.openFilter();\n      });\n      i0.ɵɵtext(40, \" Filtri \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(41, ListaPostComponent_div_41_Template, 3, 0, \"div\", 25);\n      i0.ɵɵelementStart(42, \"div\", 26);\n      i0.ɵɵelement(43, \"div\", 27);\n      i0.ɵɵelementStart(44, \"div\", 28)(45, \"div\", 29)(46, \"div\", 30);\n      i0.ɵɵtemplate(47, ListaPostComponent_div_47_Template, 3, 2, \"div\", 31);\n      i0.ɵɵpipe(48, \"paginate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(49, \"div\", 32)(50, \"pagination-controls\", 33);\n      i0.ɵɵlistener(\"pageChange\", function ListaPostComponent_Template_pagination_controls_pageChange_50_listener($event) {\n        return ctx.currentPage = $event;\n      });\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"ngModel\", ctx.searchCategoria);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categorie);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.orderBy);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", !ctx.cresc);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.cresc);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.noPost);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.noPost));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(48, 8, ctx.listaPost, i0.ɵɵpureFunction1(13, _c1, ctx.currentPage)));\n    }\n  },\n  dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.NgModel, i6.NgForm, i7.PaginationControlsComponent, i8.SingoloPostComponent, i7.PaginatePipe],\n  styles: [\"#wrapper[_ngcontent-%COMP%] {\\n    position: relative;\\n    min-height: 100vh;\\n}\\n\\n#contenuto[_ngcontent-%COMP%] {\\n    padding-bottom: 50px;\\n}\\n\\n.no-posts[_ngcontent-%COMP%] {\\n    height: 100vh;\\n  }\\n\\n.pagination-container[_ngcontent-%COMP%]{\\n    text-align: -webkit-center;    \\n}\\n\\n.h1[_ngcontent-%COMP%]{\\n    margin-top: 18px;\\n    margin-bottom: 2.5rem;\\n    font-weight: 500;\\n    line-height: 1.2;\\n    color: var(--bs-heading-color);\\n    font-size: 3.5rem;\\n    text-align: -webkit-center;\\n    text-transform: capitalize;\\n    font-family: monospace;\\n}\\n\\n#searchTitolo[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchAutore[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchCategoria[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n\\n.button-16[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border: 1px solid #f8f9fa;\\n  border-radius: 4px;\\n  color: #3c4043;\\n  cursor: pointer;\\n  font-family: arial,sans-serif;\\n  font-size: 14px;\\n  height: 36px;\\n  line-height: 27px;\\n  min-width: 54px;\\n  padding: 0 16px;\\n  text-align: center;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  touch-action: manipulation;\\n  white-space: pre;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:hover {\\n  border-color: #dadce0;\\n  box-shadow: rgba(0, 0, 0, .1) 0 1px 1px;\\n  color: #202124;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:focus {\\n  border-color: #4285f4;\\n  outline: none;\\n}\\n\\n\\n\\n\\n.collapsible[_ngcontent-%COMP%] {\\n  background-color: #777;\\n  color: white;\\n  cursor: pointer;\\n  padding: 18px;\\n  width: 100%;\\n  border: none;\\n  text-align: left;\\n  outline: none;\\n  font-size: 15px;\\n}\\n\\n.active[_ngcontent-%COMP%], .collapsible[_ngcontent-%COMP%]:hover {\\n  background-color: #555;\\n}\\n\\n.content[_ngcontent-%COMP%] {\\n  padding: 0 18px;\\n  display: none;\\n  overflow: hidden;\\n  background-color: #f1f1f1;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0YS1wb3N0L2xpc3RhLXBvc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0VBQ2Y7O0FBRUY7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsOEJBQThCO0lBQzlCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7O0FBR0E7RUFDRSx5QkFBeUI7RUFDekIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsZUFBZTtFQUNmLDZCQUE2QjtFQUM3QixlQUFlO0VBQ2YsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIseUJBQXlCO0VBQ3pCLDBCQUEwQjtFQUMxQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsdUNBQXVDO0VBQ3ZDLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtBQUNmOztBQUVBLGdCQUFnQjs7QUFFaEI7RUFDRSxzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLGVBQWU7RUFDZixhQUFhO0VBQ2IsV0FBVztFQUNYLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLGdCQUFnQjtFQUNoQix5QkFBeUI7QUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyIjd3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxufVxyXG5cclxuI2NvbnRlbnV0byB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNTBweDtcclxufVxyXG5cclxuLm5vLXBvc3RzIHtcclxuICAgIGhlaWdodDogMTAwdmg7XHJcbiAgfVxyXG5cclxuLnBhZ2luYXRpb24tY29udGFpbmVye1xyXG4gICAgdGV4dC1hbGlnbjogLXdlYmtpdC1jZW50ZXI7ICAgIFxyXG59XHJcblxyXG4uaDF7XHJcbiAgICBtYXJnaW4tdG9wOiAxOHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMi41cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbiAgICBjb2xvcjogdmFyKC0tYnMtaGVhZGluZy1jb2xvcik7XHJcbiAgICBmb250LXNpemU6IDMuNXJlbTtcclxuICAgIHRleHQtYWxpZ246IC13ZWJraXQtY2VudGVyO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XHJcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xyXG59XHJcblxyXG4jc2VhcmNoVGl0b2xve1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbiNzZWFyY2hBdXRvcmV7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuI3NlYXJjaENhdGVnb3JpYXtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5cclxuLmJ1dHRvbi0xNiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZjhmOWZhO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBjb2xvcjogIzNjNDA0MztcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgZm9udC1mYW1pbHk6IGFyaWFsLHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGhlaWdodDogMzZweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4td2lkdGg6IDU0cHg7XHJcbiAgcGFkZGluZzogMCAxNnB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB1c2VyLXNlbGVjdDogbm9uZTtcclxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xyXG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xyXG4gIHdoaXRlLXNwYWNlOiBwcmU7XHJcbn1cclxuXHJcbi5idXR0b24tMTY6aG92ZXIge1xyXG4gIGJvcmRlci1jb2xvcjogI2RhZGNlMDtcclxuICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIC4xKSAwIDFweCAxcHg7XHJcbiAgY29sb3I6ICMyMDIxMjQ7XHJcbn1cclxuXHJcbi5idXR0b24tMTY6Zm9jdXMge1xyXG4gIGJvcmRlci1jb2xvcjogIzQyODVmNDtcclxuICBvdXRsaW5lOiBub25lO1xyXG59XHJcblxyXG4vKiBDb2xsYXBzaWJsZSAqL1xyXG5cclxuLmNvbGxhcHNpYmxlIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzc3O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgcGFkZGluZzogMThweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIGZvbnQtc2l6ZTogMTVweDtcclxufVxyXG5cclxuLmFjdGl2ZSwgLmNvbGxhcHNpYmxlOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xyXG59XHJcblxyXG4uY29udGVudCB7XHJcbiAgcGFkZGluZzogMCAxOHB4O1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMWYxO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["forkJoin","Utente","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","categoria_r8","nome_categoria","ɵɵtextInterpolate","ɵɵlistener","ListaPostComponent_div_35_Template_div_click_0_listener","ɵɵrestoreView","_r10","ctx_r9","ɵɵnextContext","ɵɵresetView","cambioOrdine","orderBy","ɵɵnamespaceSVG","ɵɵelement","ListaPostComponent_div_36_Template_div_click_0_listener","_r12","ctx_r11","ListaPostComponent_div_47_div_2_Template_button_click_1_listener","_r17","post_r13","$implicit","ctx_r15","aggiungiPreferito","ɵɵtemplate","ListaPostComponent_div_47_div_2_Template","ctx_r7","utente","ListaPostComponent","constructor","route","service","serviceUtente","router","serviceCategoria","listaPost","listaPostBackup","categorie","currentPage","noPost","cresc","filtri","searchCategoria","ngOnInit","JSON","parse","sessionStorage","getItem","getAllPosts","subscribe","next","response","getAllCategorie","data","console","log","error","alert","message","coll","document","getElementsByClassName","i","length","element","addEventListener","classList","toggle","content","nextElementSibling","style","display","post","addPreferitoUtenteById","id_utente","navigate","then","window","location","reload","ricercaPostPerTitolo","key","results","titolo","toLowerCase","indexOf","push","ricercaPostPerAutore","observables","map","getAutorePostById","id_post","autori","autore","trim","err","ricercaPostPerCategoria","getCategoriePostById","categoryPost","ordinamentoPost","tipoOrdinamento","sort","a","b","localeCompare","dateA","Date","getTime","dateB","changeOrder","openFilter","closeFilter","ɵɵdirectiveInject","i1","ActivatedRoute","i2","PostService","i3","UtenteService","Router","i4","CategoriaService","selectors","decls","vars","consts","template","ListaPostComponent_Template","rf","ctx","ListaPostComponent_Template_input_ngModelChange_8_listener","_r18","_r0","ɵɵreference","value","ListaPostComponent_Template_input_ngModelChange_12_listener","_r1","ListaPostComponent_Template_select_ngModelChange_16_listener","$event","ListaPostComponent_ng_container_21_Template","ListaPostComponent_Template_button_click_23_listener","ListaPostComponent_Template_select_ngModelChange_28_listener","ListaPostComponent_Template_select_change_28_listener","ListaPostComponent_div_35_Template","ListaPostComponent_div_36_Template","ListaPostComponent_div_37_Template","ListaPostComponent_Template_button_click_39_listener","ListaPostComponent_div_41_Template","ListaPostComponent_div_47_Template","ListaPostComponent_Template_pagination_controls_pageChange_50_listener","ɵɵpureFunction1","_c0","ɵɵpipeBind2","_c1"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.ts","C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { Categoria } from 'src/app/model/categoria/categoria';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { CategoriaService } from 'src/app/services/categoria-Service/categoria.service';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})\n\nexport class ListaPostComponent implements OnInit{\n  listaPost: Post[] = [];\n  utente: Utente = new Utente();\n  listaPostBackup: Post[] = [];\n  categorie?: Categoria[] = [];\n\n  currentPage: number = 1;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente:UtenteService,\n     private router: Router, private serviceCategoria: CategoriaService){\n\n      // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n      // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n      // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n      // del select.\n\n      // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n      // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n      // sarà selezionato di default nel select.\n      this.searchCategoria = ''; //risolviamo con valore di Default\n\n  }\n  ngOnInit(): void {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato')!);\n    this.service.getAllPosts()\n      .subscribe(\n        {\n          next: (response: Post[]) => {\n            this.listaPost = response;\n            this.listaPostBackup = response;\n\n            this.serviceCategoria.getAllCategorie().subscribe({\n              next: data => {\n                console.log(data);\n                this.categorie = data;\n              },\n              error: error => console.log(error)\n            })\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        }\n      );\n\n    const coll = document.getElementsByClassName(\"collapsible\");\n    for (let i = 0; i < coll.length; i++) {\n      const element = coll[i] as HTMLElement;\n      element.addEventListener(\"click\", () => {\n        element.classList.toggle(\"active\");\n        const content = element.nextElementSibling as HTMLElement;\n        if (content?.style.display === \"block\") {\n          content.style.display = \"none\";\n        } else {\n            content.style.display = \"block\";\n        }\n      });\n    }\n  }\n\n  aggiungiPreferito(post: Post){\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n    .subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/','listapost']).then\n            (() => window.location.reload());        \n      },\n      error: error => console.log(error)\n    });\n  }\n\n  \n  noPost: boolean = false;\n\n  ricercaPostPerTitolo(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    for (const post of this.listaPost) {\n      if (post.titolo!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  \n  ricercaPostPerAutore(key: string): void {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (autori: string[]) => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results: Post[] = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n  \n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        this.listaPost = results;\n        \n        if (results.length === 0  && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  categoryPost?: string;\n  searchCategoria?: string;\n  \n  ricercaPostPerCategoria(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (categorie: string[]) => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n\n          if (this.categoryPost!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  orderBy?: string;\n  cresc?: boolean = false;\n\n  ordinamentoPost(tipoOrdinamento: string) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post! - b.id_post!);\n    } else if(tipoOrdinamento === 'position' && this.cresc === false){\n      this.listaPost.sort((a, b) => b.id_post! - a.id_post!);\n    }\n\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo!.localeCompare(a.titolo!)); \n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo!.localeCompare(b.titolo!)); \n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder: string){\n    if(this.cresc === true){\n      this.cresc = false;\n    } else if(this.cresc === false){\n      this.cresc = true;\n    }\n\n    this.ordinamentoPost(changeOrder);\n  }\n\n  filtri?: boolean = false;\n\n  openFilter(){\n    this.filtri = true;\n  }\n\n  closeFilter(){\n    this.filtri = false;\n  }\n    \n}\n","<section id=\"wrapper\">\n\n  <header class=\"page-header\">\n    <h1 class=\"h1 page-title\">\n      <span>I Racconti dei Viaggiatori</span>\n    </h1>\n    \n    <div class=\"d-flex\">\n\n      <div style=\"padding-left: 200px; padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerTitolo(key.value)\" #key=\"ngModel\" ngModel\n           name=\"key\" id=\"searchTitolo\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Titolo\" required>\n        </form>\n      </div>\n\n      <div style=\"padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerAutore(key2.value)\" #key2=\"ngModel\" ngModel\n           name=\"key2\" id=\"searchAutore\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Autore\" required>\n        </form>        \n      </div>\n\n      <div style=\"padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n            <select class=\"form-select\" name=\"subject\" aria-label=\"Subject\" required [(ngModel)]=\"searchCategoria\" id=\"selectCategoria\">\n              <option value=\"\" disabled selected hidden>Ricerca per Categoria</option>\n              <option value=\"\" disabled selected >Seleziona una Categoria</option>\n              <ng-container *ngFor=\"let categoria of categorie\">\n                <option [ngValue]=\"categoria.nome_categoria\">{{categoria!.nome_categoria}}</option>\n              </ng-container>\n            </select>\n        </form>\n      </div>\n\n      <div>\n        <button class=\"button-16\" (click)=\"ricercaPostPerCategoria(searchCategoria!)\">Cerca</button>\n      </div>\n\n      <div class=\"toolbar-sorter sorter\">\n        <label class=\"sorter-label\" for=\"sorter\">Ordina per</label>\n        <select id=\"sorter\" data-role=\"sorter\" class=\"sorter-options\" required [(ngModel)]=\"orderBy\" (change)=\"ordinamentoPost(orderBy!)\">\n          <option value=\"position\" selected=\"selected\">Posizione</option>\n          <option value=\"name\">Titolo Articolo</option>\n          <option value=\"date\">Data Inserimento</option>\n        </select>\n\n        <div *ngIf=\"!cresc\" style=\"cursor: pointer;\" (click)=\"cambioOrdine(orderBy!)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\" >\n            <path d=\"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\"/>\n          </svg>\n        </div>\n\n        <div *ngIf=\"cresc\" style=\"cursor: pointer;\" (click)=\"cambioOrdine(orderBy!)\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\" >\n            <path d=\"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/>\n          </svg>\n        </div>\n\n      </div>\n\n    </div>    \n\n    <div *ngIf=\"noPost\" class=\"col-lg-12 col-md-12 col-xl-12\">\n      <div class=\"alert alert-info\" role=\"alert\">\n        <h4 class=\"alert-heading\">NESSUN ARTICOLO TROVATO!</h4>\n        <p>No Posts were found.</p>\n      </div>\n    </div>\n\n  </header>\n\n  <div>\n    <button type=\"button\" class=\"collapsible\" (click)=\"openFilter()\">\n      Filtri\n    </button>\n  </div>\n\n  <div class=\"content\" *ng>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n  </div>\n  \n  <div class=\"filter-posts-container\">\n    <div class=\"filters-column\">\n      \n    </div>\n    <div class=\"posts-column\">\n      <!-- tramite la angular class indichiamo che la classe cambia nel momento in cui no-posts diventa true\n      e noPost diventa true quando non ci sono posts da mostrare. -->\n      <div class=\"container\" [ngClass]=\"{'no-posts': noPost}\">\n        <div class=\"row\">\n          <!-- paginate: Questa è la pipe di paginazione fornita dal modulo ngx-pagination. Una pipe è una funzione \n            che può essere utilizzata per trasformare i dati prima di visualizzarli. La pipe paginate gestisce la \n            suddivisione dei dati in pagine in base ai parametri specificati. L'oggetto che passiamo alla pipe è tra le {} -->\n          <div class=\"col-12 col-md-4\" *ngFor=\"let post of (listaPost | paginate: { itemsPerPage: 9, currentPage: currentPage })!\">\n            \n            <app-singolo-post [post]=\"post\"></app-singolo-post>\n            \n            <div *ngIf=\"this.utente\" id=\"contenuto\" style=\"margin-left: 5px;\">\n              <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"aggiungiPreferito(post)\">Aggiungi ai Preferiti</button>\n            </div>\n      \n          </div>\n\n        </div>\n      </div>\n      \n      <div class=\"pagination-container\">\n        <pagination-controls (pageChange)=\"currentPage = $event\"></pagination-controls>\n      </div>\n\n    </div>\n  </div>\n  \n</section>\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAGA,SAASA,QAAQ,QAAQ,MAAM;AAG/B,SAASC,MAAM,QAAQ,6BAA6B;;;;;;;;;;;;ICsBtCC,EAAA,CAAAC,uBAAA,GAAkD;IAChDD,EAAA,CAAAE,cAAA,iBAA6C;IAAAF,EAAA,CAAAG,MAAA,GAA6B;IAAAH,EAAA,CAAAI,YAAA,EAAS;IACrFJ,EAAA,CAAAK,qBAAA,EAAe;;;;IADLL,EAAA,CAAAM,SAAA,GAAoC;IAApCN,EAAA,CAAAO,UAAA,YAAAC,YAAA,CAAAC,cAAA,CAAoC;IAACT,EAAA,CAAAM,SAAA,GAA6B;IAA7BN,EAAA,CAAAU,iBAAA,CAAAF,YAAA,CAAAC,cAAA,CAA6B;;;;;;IAkBlFT,EAAA,CAAAE,cAAA,cAA8E;IAAjCF,EAAA,CAAAW,UAAA,mBAAAC,wDAAA;MAAAZ,EAAA,CAAAa,aAAA,CAAAC,IAAA;MAAA,MAAAC,MAAA,GAAAf,EAAA,CAAAgB,aAAA;MAAA,OAAShB,EAAA,CAAAiB,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAH,MAAA,CAAAI,OAAA,CAAsB;IAAA,EAAC;IAC3EnB,EAAA,CAAAoB,cAAA,EAA4E;IAA5EpB,EAAA,CAAAE,cAAA,cAA4E;IAC1EF,EAAA,CAAAqB,SAAA,eAAoL;IACtLrB,EAAA,CAAAI,YAAA,EAAM;;;;;;IAGRJ,EAAA,CAAAE,cAAA,cAA6E;IAAjCF,EAAA,CAAAW,UAAA,mBAAAW,wDAAA;MAAAtB,EAAA,CAAAa,aAAA,CAAAU,IAAA;MAAA,MAAAC,OAAA,GAAAxB,EAAA,CAAAgB,aAAA;MAAA,OAAShB,EAAA,CAAAiB,WAAA,CAAAO,OAAA,CAAAN,YAAA,CAAAM,OAAA,CAAAL,OAAA,CAAsB;IAAA,EAAC;IAC1EnB,EAAA,CAAAoB,cAAA,EAA4E;IAA5EpB,EAAA,CAAAE,cAAA,cAA4E;IAC1EF,EAAA,CAAAqB,SAAA,eAAoL;IACtLrB,EAAA,CAAAI,YAAA,EAAM;;;;;IAOZJ,EAAA,CAAAE,cAAA,cAA0D;IAE5BF,EAAA,CAAAG,MAAA,+BAAwB;IAAAH,EAAA,CAAAI,YAAA,EAAK;IACvDJ,EAAA,CAAAE,cAAA,QAAG;IAAAF,EAAA,CAAAG,MAAA,2BAAoB;IAAAH,EAAA,CAAAI,YAAA,EAAI;;;;;IAYjCJ,EAAA,CAAAE,cAAA,cAAyB;IACpBF,EAAA,CAAAG,MAAA,+OAAwO;IAAAH,EAAA,CAAAI,YAAA,EAAI;;;;;;IAmBvOJ,EAAA,CAAAE,cAAA,cAAkE;IACVF,EAAA,CAAAW,UAAA,mBAAAc,iEAAA;MAAAzB,EAAA,CAAAa,aAAA,CAAAa,IAAA;MAAA,MAAAC,QAAA,GAAA3B,EAAA,CAAAgB,aAAA,GAAAY,SAAA;MAAA,MAAAC,OAAA,GAAA7B,EAAA,CAAAgB,aAAA;MAAA,OAAShB,EAAA,CAAAiB,WAAA,CAAAY,OAAA,CAAAC,iBAAA,CAAAH,QAAA,CAAuB;IAAA,EAAC;IAAC3B,EAAA,CAAAG,MAAA,4BAAqB;IAAAH,EAAA,CAAAI,YAAA,EAAS;;;;;IAL1HJ,EAAA,CAAAE,cAAA,cAAyH;IAEvHF,EAAA,CAAAqB,SAAA,2BAAmD;IAEnDrB,EAAA,CAAA+B,UAAA,IAAAC,wCAAA,kBAEM;IAERhC,EAAA,CAAAI,YAAA,EAAM;;;;;IANcJ,EAAA,CAAAM,SAAA,GAAa;IAAbN,EAAA,CAAAO,UAAA,SAAAoB,QAAA,CAAa;IAEzB3B,EAAA,CAAAM,SAAA,GAAiB;IAAjBN,EAAA,CAAAO,UAAA,SAAA0B,MAAA,CAAAC,MAAA,CAAiB;;;;;;;;;;;;;;ADjFnC,OAAM,MAAOC,kBAAkB;EAQ7BC,YAAoBC,KAAqB,EAAUC,OAAoB,EAAUC,aAA2B,EACjGC,MAAc,EAAUC,gBAAkC;IAEjE;IACA;IACA;IACA;IANgB,KAAAJ,KAAK,GAALA,KAAK;IAA0B,KAAAC,OAAO,GAAPA,OAAO;IAAuB,KAAAC,aAAa,GAAbA,aAAa;IACnF,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IARnD,KAAAC,SAAS,GAAW,EAAE;IACtB,KAAAR,MAAM,GAAW,IAAInC,MAAM,EAAE;IAC7B,KAAA4C,eAAe,GAAW,EAAE;IAC5B,KAAAC,SAAS,GAAiB,EAAE;IAE5B,KAAAC,WAAW,GAAW,CAAC;IAmEvB,KAAAC,MAAM,GAAY,KAAK;IA0GvB,KAAAC,KAAK,GAAa,KAAK;IAiDvB,KAAAC,MAAM,GAAa,KAAK;IApNpB;IACA;IACA;IACA,IAAI,CAACC,eAAe,GAAG,EAAE,CAAC,CAAC;EAE/B;;EACAC,QAAQA,CAAA;IACN,IAAI,CAAChB,MAAM,GAAGiB,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAE,CAAC;IAClE,IAAI,CAAChB,OAAO,CAACiB,WAAW,EAAE,CACvBC,SAAS,CACR;MACEC,IAAI,EAAGC,QAAgB,IAAI;QACzB,IAAI,CAAChB,SAAS,GAAGgB,QAAQ;QACzB,IAAI,CAACf,eAAe,GAAGe,QAAQ;QAE/B,IAAI,CAACjB,gBAAgB,CAACkB,eAAe,EAAE,CAACH,SAAS,CAAC;UAChDC,IAAI,EAAEG,IAAI,IAAG;YACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;YACjB,IAAI,CAAChB,SAAS,GAAGgB,IAAI;UACvB,CAAC;UACDG,KAAK,EAAEA,KAAK,IAAIF,OAAO,CAACC,GAAG,CAACC,KAAK;SAClC,CAAC;MACJ,CAAC;MACDA,KAAK,EAAGA,KAAwB,IAAI;QAClCC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;MACtB;KACD,CACF;IAEH,MAAMC,IAAI,GAAGC,QAAQ,CAACC,sBAAsB,CAAC,aAAa,CAAC;IAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,OAAO,GAAGL,IAAI,CAACG,CAAC,CAAgB;MACtCE,OAAO,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAK;QACrCD,OAAO,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;QAClC,MAAMC,OAAO,GAAGJ,OAAO,CAACK,kBAAiC;QACzD,IAAID,OAAO,EAAEE,KAAK,CAACC,OAAO,KAAK,OAAO,EAAE;UACtCH,OAAO,CAACE,KAAK,CAACC,OAAO,GAAG,MAAM;SAC/B,MAAM;UACHH,OAAO,CAACE,KAAK,CAACC,OAAO,GAAG,OAAO;;MAErC,CAAC,CAAC;;EAEN;EAEAhD,iBAAiBA,CAACiD,IAAU;IAC1B,IAAI,CAACxC,aAAa,CAACyC,sBAAsB,CAACD,IAAI,EAAE,IAAI,CAAC7C,MAAO,CAAC+C,SAAU,CAAC,CACvEzB,SAAS,CAAC;MACTC,IAAI,EAAEA,CAAA,KAAK;QACTI,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvD,IAAI,CAACtB,MAAM,CAAC0C,QAAQ,CAAC,CAAC,GAAG,EAAC,WAAW,CAAC,CAAC,CAACC,IAAI,CACvC,MAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE,CAAC;MACtC,CAAC;MACDvB,KAAK,EAAEA,KAAK,IAAIF,OAAO,CAACC,GAAG,CAACC,KAAK;KAClC,CAAC;EACJ;EAKAwB,oBAAoBA,CAACC,GAAW;IAC9B3B,OAAO,CAACC,GAAG,CAAC0B,GAAG,CAAC;IAChB,MAAMC,OAAO,GAAW,EAAE;IAC1B,KAAK,MAAMV,IAAI,IAAI,IAAI,CAACrC,SAAS,EAAE;MACjC,IAAIqC,IAAI,CAACW,MAAO,CAACC,WAAW,EAAE,CAACC,OAAO,CAACJ,GAAG,CAACG,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QAChEF,OAAO,CAACI,IAAI,CAACd,IAAI,CAAC;;;IAGtB;IACA,IAAI,CAACrC,SAAS,GAAG+C,OAAO;IACxB;IACA,IAAI,CAACD,GAAG,EAAE;MACR,IAAI,CAAC9C,SAAS,GAAG,IAAI,CAACC,eAAe;;IAGvC,IAAI8C,OAAO,CAACnB,MAAM,KAAK,CAAC,IAAIkB,GAAG,EAAE;MAC/B,IAAI,CAAC1C,MAAM,GAAG,IAAI;KACnB,MAAM;MACL,IAAI,CAACA,MAAM,GAAG,KAAK;;EAEvB;EAEA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EAEAgD,oBAAoBA,CAACN,GAAW;IAC9B3B,OAAO,CAACC,GAAG,CAAC0B,GAAG,CAAC;IAChB,MAAMO,WAAW,GAAG,IAAI,CAACrD,SAAS,CAACsD,GAAG,CAACjB,IAAI,IAAI,IAAI,CAACzC,OAAO,CAAC2D,iBAAiB,CAAClB,IAAI,CAACmB,OAAQ,CAAC,CAAC;IAE7FpG,QAAQ,CAACiG,WAAW,CAAC,CAACvC,SAAS,CAAC;MAC9BC,IAAI,EAAG0C,MAAgB,IAAI;QACzB;QACA,MAAMV,OAAO,GAAW,EAAE;QAC1B,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,MAAM,CAAC7B,MAAM,EAAED,CAAC,EAAE,EAAE;UACtC,MAAM+B,MAAM,GAAGD,MAAM,CAAC9B,CAAC,CAAC,CAACgC,IAAI,EAAE,CAAC,CAAC;UACjCxC,OAAO,CAACC,GAAG,CAACsC,MAAM,CAAC;UAEnB,IAAIA,MAAM,CAACT,WAAW,EAAE,CAACC,OAAO,CAACJ,GAAG,CAACG,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1DF,OAAO,CAACI,IAAI,CAAC,IAAI,CAACnD,SAAS,CAAC2B,CAAC,CAAC,CAAC;;;QAInC,IAAI,CAAC3B,SAAS,GAAG+C,OAAO;QAExB,IAAIA,OAAO,CAACnB,MAAM,KAAK,CAAC,IAAKkB,GAAG,EAAE;UAChC,IAAI,CAAC1C,MAAM,GAAG,IAAI;SACnB,MAAM;UACL,IAAI,CAACA,MAAM,GAAG,KAAK;;QAGrB,IAAI,CAAC0C,GAAG,EAAE;UACR,IAAI,CAAC9C,SAAS,GAAG,IAAI,CAACC,eAAe;;MAEzC,CAAC;MACDoB,KAAK,EAAGuC,GAAG,IAAKzC,OAAO,CAACC,GAAG,CAACwC,GAAG;KAChC,CAAC;EACJ;EAKAC,uBAAuBA,CAACf,GAAW;IACjC3B,OAAO,CAACC,GAAG,CAAC0B,GAAG,CAAC;IAChB,MAAMC,OAAO,GAAW,EAAE;IAC1B,MAAMM,WAAW,GAAG,IAAI,CAACrD,SAAS,CAACsD,GAAG,CAACjB,IAAI,IAAI,IAAI,CAACzC,OAAO,CAACkE,oBAAoB,CAACzB,IAAI,CAACmB,OAAQ,CAAC,CAAC;IAEhGpG,QAAQ,CAACiG,WAAW,CAAC,CAACvC,SAAS,CAAC;MAC9BC,IAAI,EAAGb,SAAmB,IAAI;QAC5B,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,SAAS,CAAC0B,MAAM,EAAED,CAAC,EAAE,EAAE;UACzC,IAAI,CAACoC,YAAY,GAAG7D,SAAS,CAACyB,CAAC,CAAC;UAEhC,IAAI,IAAI,CAACoC,YAAa,CAACd,WAAW,EAAE,CAACC,OAAO,CAACJ,GAAG,CAACG,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;YACtEF,OAAO,CAACI,IAAI,CAAC,IAAI,CAACnD,SAAS,CAAC2B,CAAC,CAAC,CAAC;;;QAInC;QACA,IAAI,CAAC3B,SAAS,GAAG+C,OAAO;QAExB;QACA,IAAI,CAACD,GAAG,EAAE;UACR,IAAI,CAAC9C,SAAS,GAAG,IAAI,CAACC,eAAe;;QAGvC,IAAI8C,OAAO,CAACnB,MAAM,KAAK,CAAC,IAAIkB,GAAG,EAAE;UAC/B,IAAI,CAAC1C,MAAM,GAAG,IAAI;SACnB,MAAM;UACL,IAAI,CAACA,MAAM,GAAG,KAAK;;MAEvB,CAAC;MACDiB,KAAK,EAAGuC,GAAG,IAAKzC,OAAO,CAACC,GAAG,CAACwC,GAAG;KAChC,CAAC;EACJ;EAKAI,eAAeA,CAACC,eAAuB;IACrC,IAAIA,eAAe,KAAK,UAAU,IAAI,IAAI,CAAC5D,KAAK,KAAK,IAAI,EAAE;MACzD,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACX,OAAQ,GAAGY,CAAC,CAACZ,OAAQ,CAAC;KACvD,MAAM,IAAGS,eAAe,KAAK,UAAU,IAAI,IAAI,CAAC5D,KAAK,KAAK,KAAK,EAAC;MAC/D,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACZ,OAAQ,GAAGW,CAAC,CAACX,OAAQ,CAAC;;IAGxD,IAAIS,eAAe,KAAK,MAAM,IAAI,IAAI,CAAC5D,KAAK,KAAK,IAAI,EAAE;MACrD,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACpB,MAAO,CAACqB,aAAa,CAACF,CAAC,CAACnB,MAAO,CAAC,CAAC;MACjE;KACD,MAAM,IAAIiB,eAAe,KAAK,MAAM,IAAI,IAAI,CAAC5D,KAAK,KAAK,KAAK,EAAE;MAC7D,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACnB,MAAO,CAACqB,aAAa,CAACD,CAAC,CAACpB,MAAO,CAAC,CAAC;MACjE;;;IAGF,IAAIiB,eAAe,KAAK,MAAM,IAAI,IAAI,CAAC5D,KAAK,KAAK,KAAK,EAAE;MACtD,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QAC3B,MAAME,KAAK,GAAG,IAAIC,IAAI,CAACJ,CAAC,CAACjD,IAAK,CAAC,CAACsD,OAAO,EAAE;QACzC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAACH,CAAC,CAAClD,IAAK,CAAC,CAACsD,OAAO,EAAE;QACzCrD,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEkD,KAAK,EAAE,SAAS,EAAEG,KAAK,CAAC;QAC/C,OAAOA,KAAK,GAAGH,KAAK,CAAC,CAAC;QACtB;QACA;QACA;MACF,CAAC,CAAC;KACH,MAAM,IAAIL,eAAe,KAAK,MAAM,IAAI,IAAI,CAAC5D,KAAK,KAAK,IAAI,EAAE;MAC5D,IAAI,CAACL,SAAS,CAACkE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QAC3B,MAAME,KAAK,GAAG,IAAIC,IAAI,CAACJ,CAAC,CAACjD,IAAK,CAAC,CAACsD,OAAO,EAAE;QACzC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAACH,CAAC,CAAClD,IAAK,CAAC,CAACsD,OAAO,EAAE;QACzC,OAAOF,KAAK,GAAGG,KAAK,CAAC,CAAC;QACtB;QACA;QACA;MACF,CAAC,CAAC;;EAEN;;EAEAjG,YAAYA,CAACkG,WAAmB;IAC9B,IAAG,IAAI,CAACrE,KAAK,KAAK,IAAI,EAAC;MACrB,IAAI,CAACA,KAAK,GAAG,KAAK;KACnB,MAAM,IAAG,IAAI,CAACA,KAAK,KAAK,KAAK,EAAC;MAC7B,IAAI,CAACA,KAAK,GAAG,IAAI;;IAGnB,IAAI,CAAC2D,eAAe,CAACU,WAAW,CAAC;EACnC;EAIAC,UAAUA,CAAA;IACR,IAAI,CAACrE,MAAM,GAAG,IAAI;EACpB;EAEAsE,WAAWA,CAAA;IACT,IAAI,CAACtE,MAAM,GAAG,KAAK;EACrB;;AA5OWb,kBAAkB,C;mBAAlBA,kBAAkB,EAAAnC,EAAA,CAAAuH,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAzH,EAAA,CAAAuH,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAA3H,EAAA,CAAAuH,iBAAA,CAAAK,EAAA,CAAAC,aAAA,GAAA7H,EAAA,CAAAuH,iBAAA,CAAAC,EAAA,CAAAM,MAAA,GAAA9H,EAAA,CAAAuH,iBAAA,CAAAQ,EAAA,CAAAC,gBAAA;AAAA;AAAlB7F,kBAAkB,C;QAAlBA,kBAAkB;EAAA8F,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MCjB/BvI,EAAA,CAAAE,cAAA,iBAAsB;MAIVF,EAAA,CAAAG,MAAA,iCAA0B;MAAAH,EAAA,CAAAI,YAAA,EAAO;MAGzCJ,EAAA,CAAAE,cAAA,aAAoB;MAIOF,EAAA,CAAAW,UAAA,2BAAA8H,2DAAA;QAAAzI,EAAA,CAAAa,aAAA,CAAA6H,IAAA;QAAA,MAAAC,GAAA,GAAA3I,EAAA,CAAA4I,WAAA;QAAA,OAAiB5I,EAAA,CAAAiB,WAAA,CAAAuH,GAAA,CAAAjD,oBAAA,CAAAoD,GAAA,CAAAE,KAAA,CAA+B;MAAA,EAAC;MAAtE7I,EAAA,CAAAI,YAAA,EACqG;MAIzGJ,EAAA,CAAAE,cAAA,cAAkC;MAETF,EAAA,CAAAW,UAAA,2BAAAmI,4DAAA;QAAA9I,EAAA,CAAAa,aAAA,CAAA6H,IAAA;QAAA,MAAAK,GAAA,GAAA/I,EAAA,CAAA4I,WAAA;QAAA,OAAiB5I,EAAA,CAAAiB,WAAA,CAAAuH,GAAA,CAAA1C,oBAAA,CAAAiD,GAAA,CAAAF,KAAA,CAAgC;MAAA,EAAC;MAAvE7I,EAAA,CAAAI,YAAA,EACsG;MAI1GJ,EAAA,CAAAE,cAAA,cAAkC;MAE6CF,EAAA,CAAAW,UAAA,2BAAAqI,6DAAAC,MAAA;QAAA,OAAAT,GAAA,CAAAvF,eAAA,GAAAgG,MAAA;MAAA,EAA6B;MACpGjJ,EAAA,CAAAE,cAAA,kBAA0C;MAAAF,EAAA,CAAAG,MAAA,6BAAqB;MAAAH,EAAA,CAAAI,YAAA,EAAS;MACxEJ,EAAA,CAAAE,cAAA,kBAAoC;MAAAF,EAAA,CAAAG,MAAA,+BAAuB;MAAAH,EAAA,CAAAI,YAAA,EAAS;MACpEJ,EAAA,CAAA+B,UAAA,KAAAmH,2CAAA,2BAEe;MACjBlJ,EAAA,CAAAI,YAAA,EAAS;MAIfJ,EAAA,CAAAE,cAAA,WAAK;MACuBF,EAAA,CAAAW,UAAA,mBAAAwI,qDAAA;QAAA,OAASX,GAAA,CAAAjC,uBAAA,CAAAiC,GAAA,CAAAvF,eAAA,CAAyC;MAAA,EAAC;MAACjD,EAAA,CAAAG,MAAA,aAAK;MAAAH,EAAA,CAAAI,YAAA,EAAS;MAG9FJ,EAAA,CAAAE,cAAA,eAAmC;MACQF,EAAA,CAAAG,MAAA,kBAAU;MAAAH,EAAA,CAAAI,YAAA,EAAQ;MAC3DJ,EAAA,CAAAE,cAAA,kBAAkI;MAA3DF,EAAA,CAAAW,UAAA,2BAAAyI,6DAAAH,MAAA;QAAA,OAAAT,GAAA,CAAArH,OAAA,GAAA8H,MAAA;MAAA,EAAqB,oBAAAI,sDAAA;QAAA,OAAWb,GAAA,CAAA9B,eAAA,CAAA8B,GAAA,CAAArH,OAAA,CAAyB;MAAA,EAApC;MAC1FnB,EAAA,CAAAE,cAAA,kBAA6C;MAAAF,EAAA,CAAAG,MAAA,iBAAS;MAAAH,EAAA,CAAAI,YAAA,EAAS;MAC/DJ,EAAA,CAAAE,cAAA,kBAAqB;MAAAF,EAAA,CAAAG,MAAA,uBAAe;MAAAH,EAAA,CAAAI,YAAA,EAAS;MAC7CJ,EAAA,CAAAE,cAAA,kBAAqB;MAAAF,EAAA,CAAAG,MAAA,wBAAgB;MAAAH,EAAA,CAAAI,YAAA,EAAS;MAGhDJ,EAAA,CAAA+B,UAAA,KAAAuH,kCAAA,kBAIM;MAENtJ,EAAA,CAAA+B,UAAA,KAAAwH,kCAAA,kBAIM;MAERvJ,EAAA,CAAAI,YAAA,EAAM;MAIRJ,EAAA,CAAA+B,UAAA,KAAAyH,kCAAA,kBAKM;MAERxJ,EAAA,CAAAI,YAAA,EAAS;MAETJ,EAAA,CAAAE,cAAA,WAAK;MACuCF,EAAA,CAAAW,UAAA,mBAAA8I,qDAAA;QAAA,OAASjB,GAAA,CAAAnB,UAAA,EAAY;MAAA,EAAC;MAC9DrH,EAAA,CAAAG,MAAA,gBACF;MAAAH,EAAA,CAAAI,YAAA,EAAS;MAGXJ,EAAA,CAAA+B,UAAA,KAAA2H,kCAAA,kBAEM;MAEN1J,EAAA,CAAAE,cAAA,eAAoC;MAClCF,EAAA,CAAAqB,SAAA,eAEM;MACNrB,EAAA,CAAAE,cAAA,eAA0B;MAQpBF,EAAA,CAAA+B,UAAA,KAAA4H,kCAAA,kBAQM;;MAER3J,EAAA,CAAAI,YAAA,EAAM;MAGRJ,EAAA,CAAAE,cAAA,eAAkC;MACXF,EAAA,CAAAW,UAAA,wBAAAiJ,uEAAAX,MAAA;QAAA,OAAAT,GAAA,CAAA3F,WAAA,GAAAoG,MAAA;MAAA,EAAmC;MAACjJ,EAAA,CAAAI,YAAA,EAAsB;;;MAnFFJ,EAAA,CAAAM,SAAA,IAA6B;MAA7BN,EAAA,CAAAO,UAAA,YAAAiI,GAAA,CAAAvF,eAAA,CAA6B;MAGhEjD,EAAA,CAAAM,SAAA,GAAY;MAAZN,EAAA,CAAAO,UAAA,YAAAiI,GAAA,CAAA5F,SAAA,CAAY;MAaiB5C,EAAA,CAAAM,SAAA,GAAqB;MAArBN,EAAA,CAAAO,UAAA,YAAAiI,GAAA,CAAArH,OAAA,CAAqB;MAMtFnB,EAAA,CAAAM,SAAA,GAAY;MAAZN,EAAA,CAAAO,UAAA,UAAAiI,GAAA,CAAAzF,KAAA,CAAY;MAMZ/C,EAAA,CAAAM,SAAA,GAAW;MAAXN,EAAA,CAAAO,UAAA,SAAAiI,GAAA,CAAAzF,KAAA,CAAW;MAUf/C,EAAA,CAAAM,SAAA,GAAY;MAAZN,EAAA,CAAAO,UAAA,SAAAiI,GAAA,CAAA1F,MAAA,CAAY;MA0BO9C,EAAA,CAAAM,SAAA,GAAgC;MAAhCN,EAAA,CAAAO,UAAA,YAAAP,EAAA,CAAA6J,eAAA,KAAAC,GAAA,EAAAtB,GAAA,CAAA1F,MAAA,EAAgC;MAKL9C,EAAA,CAAAM,SAAA,GAAyE;MAAzEN,EAAA,CAAAO,UAAA,YAAAP,EAAA,CAAA+J,WAAA,QAAAvB,GAAA,CAAA9F,SAAA,EAAA1C,EAAA,CAAA6J,eAAA,KAAAG,GAAA,EAAAxB,GAAA,CAAA3F,WAAA,GAAyE"},"metadata":{},"sourceType":"module","externalDependencies":[]}