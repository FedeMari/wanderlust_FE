{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { Utente } from 'src/app/model/utente/utente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/post-Service/post.service\";\nimport * as i3 from \"src/app/services/utente-Service/utente.service\";\nimport * as i4 from \"src/app/services/categoria-Service/categoria.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"ngx-pagination\";\nimport * as i8 from \"../singolo-post/singolo-post.component\";\nfunction ListaPostComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"option\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const categoria_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", categoria_r5.nome_categoria);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(categoria_r5.nome_categoria);\n  }\n}\nfunction ListaPostComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"h4\", 31);\n    i0.ɵɵtext(3, \"NESSUN ARTICOLO TROVATO!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"No Posts were found.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ListaPostComponent_div_38_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_38_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const post_r6 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.aggiungiPreferito(post_r6));\n    });\n    i0.ɵɵtext(2, \"Aggiungi ai Preferiti\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelement(1, \"app-singolo-post\", 33);\n    i0.ɵɵtemplate(2, ListaPostComponent_div_38_div_2_Template, 3, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const post_r6 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"post\", post_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.utente);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"no-posts\": a0\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    itemsPerPage: 9,\n    currentPage: a1\n  };\n};\nexport class ListaPostComponent {\n  constructor(route, service, serviceUtente, router, serviceCategoria) {\n    // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n    // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n    // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n    // del select.\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.serviceCategoria = serviceCategoria;\n    this.listaPost = [];\n    this.utente = new Utente();\n    this.listaPostBackup = [];\n    this.categorie = [];\n    this.currentPage = 1;\n    this.noPost = false;\n    // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n    // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n    // sarà selezionato di default nel select.\n    this.searchCategoria = ''; //risolviamo con valore di Default\n  }\n\n  ngOnInit() {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato'));\n    this.service.getAllPosts().subscribe({\n      next: response => {\n        this.listaPost = response;\n        this.listaPostBackup = response;\n        this.serviceCategoria.getAllCategorie().subscribe({\n          next: data => {\n            console.log(data);\n            this.categorie = data;\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n  aggiungiPreferito(post) {\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/', 'listapost']).then(() => window.location.reload());\n      },\n      error: error => console.log(error)\n    });\n  }\n  ricercaPostPerTitolo(key) {\n    console.log(key);\n    const results = [];\n    for (const post of this.listaPost) {\n      if (post.titolo.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  ricercaPostPerAutore(key) {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: autori => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        this.listaPost = results;\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ricercaPostPerCategoria(key) {\n    console.log(key);\n    const results = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: categorie => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n          if (this.categoryPost.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ordinamentoPost(tipoOrdinamento) {\n    if (tipoOrdinamento === 'position') {\n      this.listaPost.sort((a, b) => a.id_post - b.id_post);\n    } else if (tipoOrdinamento === 'name') {\n      this.listaPost.sort((a, b) => a.titolo.localeCompare - b.titolo);\n    } else if (tipoOrdinamento === 'date') {}\n  }\n}\nListaPostComponent.ɵfac = function ListaPostComponent_Factory(t) {\n  return new (t || ListaPostComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.UtenteService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.CategoriaService));\n};\nListaPostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListaPostComponent,\n  selectors: [[\"app-lista-post\"]],\n  decls: 42,\n  vars: 13,\n  consts: [[\"id\", \"wrapper\"], [1, \"page-header\"], [1, \"h1\", \"page-title\"], [1, \"d-flex\"], [2, \"padding-left\", \"200px\", \"padding-right\", \"20px\"], [1, \"form-inline\", \"my-2\", \"my-lg-0\", 2, \"display\", \"inline\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key\", \"id\", \"searchTitolo\", \"placeholder\", \"Ricerca per Titolo\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key\", \"ngModel\"], [2, \"padding-right\", \"20px\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key2\", \"id\", \"searchAutore\", \"placeholder\", \"Ricerca per Autore\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key2\", \"ngModel\"], [\"name\", \"subject\", \"aria-label\", \"Subject\", \"required\", \"\", \"id\", \"selectCategoria\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\", \"hidden\", \"\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"button-16\", 3, \"click\"], [1, \"toolbar-sorter\", \"sorter\"], [\"for\", \"sorter\", 1, \"sorter-label\"], [\"id\", \"sorter\", \"data-role\", \"sorter\", \"required\", \"\", 1, \"sorter-options\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"position\", \"selected\", \"selected\"], [\"value\", \"name\"], [\"value\", \"date\"], [\"class\", \"col-lg-12 col-md-12 col-xl-12\", 4, \"ngIf\"], [1, \"container\", 3, \"ngClass\"], [1, \"row\"], [\"class\", \"col-12 col-md-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"pagination-container\"], [3, \"pageChange\"], [3, \"ngValue\"], [1, \"col-lg-12\", \"col-md-12\", \"col-xl-12\"], [\"role\", \"alert\", 1, \"alert\", \"alert-info\"], [1, \"alert-heading\"], [1, \"col-12\", \"col-md-4\"], [3, \"post\"], [\"id\", \"contenuto\", \"style\", \"margin-left: 5px;\", 4, \"ngIf\"], [\"id\", \"contenuto\", 2, \"margin-left\", \"5px\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"]],\n  template: function ListaPostComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r11 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"header\", 1)(2, \"h1\", 2)(3, \"span\");\n      i0.ɵɵtext(4, \"I Racconti dei Viaggiatori\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"form\", 5)(8, \"input\", 6, 7);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_8_listener() {\n        i0.ɵɵrestoreView(_r11);\n        const _r0 = i0.ɵɵreference(9);\n        return i0.ɵɵresetView(ctx.ricercaPostPerTitolo(_r0.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"form\", 5)(12, \"input\", 9, 10);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_12_listener() {\n        i0.ɵɵrestoreView(_r11);\n        const _r1 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(ctx.ricercaPostPerAutore(_r1.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"div\", 8)(15, \"form\", 5)(16, \"select\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_select_ngModelChange_16_listener($event) {\n        return ctx.searchCategoria = $event;\n      });\n      i0.ɵɵelementStart(17, \"option\", 12);\n      i0.ɵɵtext(18, \"Ricerca per Categoria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"option\", 13);\n      i0.ɵɵtext(20, \"Seleziona una Categoria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, ListaPostComponent_ng_container_21_Template, 3, 2, \"ng-container\", 14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\")(23, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function ListaPostComponent_Template_button_click_23_listener() {\n        return ctx.ricercaPostPerCategoria(ctx.searchCategoria);\n      });\n      i0.ɵɵtext(24, \"Cerca\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 16)(26, \"label\", 17);\n      i0.ɵɵtext(27, \"Ordina per\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"select\", 18);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_select_ngModelChange_28_listener($event) {\n        return ctx.orderBy = $event;\n      });\n      i0.ɵɵelementStart(29, \"option\", 19);\n      i0.ɵɵtext(30, \"Posizione\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"option\", 20);\n      i0.ɵɵtext(32, \"Titolo Articolo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"option\", 21);\n      i0.ɵɵtext(34, \"Data Inserimento\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(35, ListaPostComponent_div_35_Template, 6, 0, \"div\", 22);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 23)(37, \"div\", 24);\n      i0.ɵɵtemplate(38, ListaPostComponent_div_38_Template, 3, 2, \"div\", 25);\n      i0.ɵɵpipe(39, \"paginate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(40, \"div\", 26)(41, \"pagination-controls\", 27);\n      i0.ɵɵlistener(\"pageChange\", function ListaPostComponent_Template_pagination_controls_pageChange_41_listener($event) {\n        return ctx.currentPage = $event;\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"ngModel\", ctx.searchCategoria);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categorie);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.orderBy);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.noPost);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.noPost));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(39, 6, ctx.listaPost, i0.ɵɵpureFunction1(11, _c1, ctx.currentPage)));\n    }\n  },\n  dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.NgModel, i6.NgForm, i7.PaginationControlsComponent, i8.SingoloPostComponent, i7.PaginatePipe],\n  styles: [\"#wrapper[_ngcontent-%COMP%] {\\n    position: relative;\\n    min-height: 100vh;\\n}\\n\\n#contenuto[_ngcontent-%COMP%] {\\n    padding-bottom: 50px;\\n}\\n\\n.no-posts[_ngcontent-%COMP%] {\\n    height: 100vh;\\n  }\\n\\n.pagination-container[_ngcontent-%COMP%]{\\n    text-align: -webkit-center;    \\n}\\n\\n.h1[_ngcontent-%COMP%]{\\n    margin-top: 18px;\\n    margin-bottom: 2.5rem;\\n    font-weight: 500;\\n    line-height: 1.2;\\n    color: var(--bs-heading-color);\\n    font-size: 3.5rem;\\n    text-align: -webkit-center;\\n    text-transform: capitalize;\\n    font-family: monospace;\\n}\\n\\n#searchTitolo[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchAutore[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchCategoria[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n\\n.button-16[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border: 1px solid #f8f9fa;\\n  border-radius: 4px;\\n  color: #3c4043;\\n  cursor: pointer;\\n  font-family: arial,sans-serif;\\n  font-size: 14px;\\n  height: 36px;\\n  line-height: 27px;\\n  min-width: 54px;\\n  padding: 0 16px;\\n  text-align: center;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  touch-action: manipulation;\\n  white-space: pre;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:hover {\\n  border-color: #dadce0;\\n  box-shadow: rgba(0, 0, 0, .1) 0 1px 1px;\\n  color: #202124;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:focus {\\n  border-color: #4285f4;\\n  outline: none;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0YS1wb3N0L2xpc3RhLXBvc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0VBQ2Y7O0FBRUY7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsOEJBQThCO0lBQzlCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7O0FBR0E7RUFDRSx5QkFBeUI7RUFDekIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsZUFBZTtFQUNmLDZCQUE2QjtFQUM3QixlQUFlO0VBQ2YsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIseUJBQXlCO0VBQ3pCLDBCQUEwQjtFQUMxQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsdUNBQXVDO0VBQ3ZDLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI3dyYXBwZXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWluLWhlaWdodDogMTAwdmg7XHJcbn1cclxuXHJcbiNjb250ZW51dG8ge1xyXG4gICAgcGFkZGluZy1ib3R0b206IDUwcHg7XHJcbn1cclxuXHJcbi5uby1wb3N0cyB7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gIH1cclxuXHJcbi5wYWdpbmF0aW9uLWNvbnRhaW5lcntcclxuICAgIHRleHQtYWxpZ246IC13ZWJraXQtY2VudGVyOyAgICBcclxufVxyXG5cclxuLmgxe1xyXG4gICAgbWFyZ2luLXRvcDogMThweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDIuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICBsaW5lLWhlaWdodDogMS4yO1xyXG4gICAgY29sb3I6IHZhcigtLWJzLWhlYWRpbmctY29sb3IpO1xyXG4gICAgZm9udC1zaXplOiAzLjVyZW07XHJcbiAgICB0ZXh0LWFsaWduOiAtd2Via2l0LWNlbnRlcjtcclxuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xyXG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcclxufVxyXG5cclxuI3NlYXJjaFRpdG9sb3tcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4jc2VhcmNoQXV0b3Jle1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbiNzZWFyY2hDYXRlZ29yaWF7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuXHJcbi5idXR0b24tMTYge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2Y4ZjlmYTtcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgY29sb3I6ICMzYzQwNDM7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGZvbnQtZmFtaWx5OiBhcmlhbCxzYW5zLXNlcmlmO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBoZWlnaHQ6IDM2cHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgbWluLXdpZHRoOiA1NHB4O1xyXG4gIHBhZGRpbmc6IDAgMTZweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcclxuICB3aGl0ZS1zcGFjZTogcHJlO1xyXG59XHJcblxyXG4uYnV0dG9uLTE2OmhvdmVyIHtcclxuICBib3JkZXItY29sb3I6ICNkYWRjZTA7XHJcbiAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAuMSkgMCAxcHggMXB4O1xyXG4gIGNvbG9yOiAjMjAyMTI0O1xyXG59XHJcblxyXG4uYnV0dG9uLTE2OmZvY3VzIHtcclxuICBib3JkZXItY29sb3I6ICM0Mjg1ZjQ7XHJcbiAgb3V0bGluZTogbm9uZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["forkJoin","Utente","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","categoria_r5","nome_categoria","ɵɵtextInterpolate","ɵɵlistener","ListaPostComponent_div_38_div_2_Template_button_click_1_listener","ɵɵrestoreView","_r10","post_r6","ɵɵnextContext","$implicit","ctx_r8","ɵɵresetView","aggiungiPreferito","ɵɵelement","ɵɵtemplate","ListaPostComponent_div_38_div_2_Template","ctx_r4","utente","ListaPostComponent","constructor","route","service","serviceUtente","router","serviceCategoria","listaPost","listaPostBackup","categorie","currentPage","noPost","searchCategoria","ngOnInit","JSON","parse","sessionStorage","getItem","getAllPosts","subscribe","next","response","getAllCategorie","data","console","log","error","alert","message","post","addPreferitoUtenteById","id_utente","navigate","then","window","location","reload","ricercaPostPerTitolo","key","results","titolo","toLowerCase","indexOf","push","length","ricercaPostPerAutore","observables","map","getAutorePostById","id_post","autori","i","autore","trim","err","ricercaPostPerCategoria","getCategoriePostById","categoryPost","ordinamentoPost","tipoOrdinamento","sort","a","b","localeCompare","ɵɵdirectiveInject","i1","ActivatedRoute","i2","PostService","i3","UtenteService","Router","i4","CategoriaService","selectors","decls","vars","consts","template","ListaPostComponent_Template","rf","ctx","ListaPostComponent_Template_input_ngModelChange_8_listener","_r11","_r0","ɵɵreference","value","ListaPostComponent_Template_input_ngModelChange_12_listener","_r1","ListaPostComponent_Template_select_ngModelChange_16_listener","$event","ListaPostComponent_ng_container_21_Template","ListaPostComponent_Template_button_click_23_listener","ListaPostComponent_Template_select_ngModelChange_28_listener","orderBy","ListaPostComponent_div_35_Template","ListaPostComponent_div_38_Template","ListaPostComponent_Template_pagination_controls_pageChange_41_listener","ɵɵpureFunction1","_c0","ɵɵpipeBind2","_c1"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.ts","C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { Categoria } from 'src/app/model/categoria/categoria';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { CategoriaService } from 'src/app/services/categoria-Service/categoria.service';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})\n\nexport class ListaPostComponent implements OnInit{\n  listaPost: Post[] = [];\n  utente: Utente = new Utente();\n  listaPostBackup: Post[] = [];\n  categorie?: Categoria[] = [];\n\n  currentPage: number = 1;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente:UtenteService,\n     private router: Router, private serviceCategoria: CategoriaService){\n\n      // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n      // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n      // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n      // del select.\n\n      // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n      // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n      // sarà selezionato di default nel select.\n      this.searchCategoria = ''; //risolviamo con valore di Default\n\n  }\n  ngOnInit(): void {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato')!);\n    this.service.getAllPosts()\n      .subscribe(\n        {\n          next: (response: Post[]) => {\n            this.listaPost = response;\n            this.listaPostBackup = response;\n\n            this.serviceCategoria.getAllCategorie().subscribe({\n              next: data => {\n                console.log(data);\n                this.categorie = data;\n              },\n              error: error => console.log(error)\n            })\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        }\n      );\n  }\n\n  aggiungiPreferito(post: Post){\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n    .subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/','listapost']).then\n            (() => window.location.reload());        \n      },\n      error: error => console.log(error)\n    });\n  }\n\n  \n  noPost: boolean = false;\n\n  ricercaPostPerTitolo(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    for (const post of this.listaPost) {\n      if (post.titolo!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  \n  ricercaPostPerAutore(key: string): void {\n      console.log(key);\n      const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post!));\n    \n      forkJoin(observables).subscribe({\n        next: (autori: string[]) => {\n          //costante di appoggio per creare la lista e travasare il risultato in listaPost\n          const results: Post[] = [];\n          for (let i = 0; i < autori.length; i++) {\n            const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n            console.log(autore);\n    \n            if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n              results.push(this.listaPost[i]);\n            }\n          }\n\n          this.listaPost = results;\n          \n          if (results.length === 0  && key) {\n            this.noPost = true;\n          } else {\n            this.noPost = false;\n          }\n\n          if (!key) {\n            this.listaPost = this.listaPostBackup;\n          }\n        },\n        error: (err) => console.log(err)\n      });      \n\n    }\n\n    categoryPost?: string;\n    searchCategoria?: string;\n\n    ricercaPostPerCategoria(key: string): void {\n      console.log(key);\n      const results: Post[] = [];\n      const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post!));\n  \n      forkJoin(observables).subscribe({\n        next: (categorie: string[]) => {\n          for (let i = 0; i < categorie.length; i++) {\n            this.categoryPost = categorie[i];\n  \n            if (this.categoryPost!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n              results.push(this.listaPost[i]);\n            }\n          }\n  \n          //aggiorniamo i post visibili sulla pagina\n          this.listaPost = results;\n  \n          //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n          if (!key) {\n            this.listaPost = this.listaPostBackup;\n          }\n  \n          if (results.length === 0 && key) {\n            this.noPost = true;\n          } else {\n            this.noPost = false;\n          }\n        },\n        error: (err) => console.log(err)\n      });\n    }\n\n    orderBy?: string;\n\n    ordinamentoPost(tipoOrdinamento: string){\n      if(tipoOrdinamento === 'position'){\n        this.listaPost.sort((a, b) => a.id_post! - b.id_post!);\n      }\n      else if(tipoOrdinamento === 'name'){\n        this.listaPost.sort((a, b) => a.titolo!.localeCompare - b.titolo!);\n      }\n      else if(tipoOrdinamento === 'date'){\n\n      }\n\n    }\n}\n","<section id=\"wrapper\">\n\n  <header class=\"page-header\">\n    <h1 class=\"h1 page-title\">\n      <span>I Racconti dei Viaggiatori</span>\n    </h1>\n    \n    <div class=\"d-flex\">\n\n      <div style=\"padding-left: 200px; padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerTitolo(key.value)\" #key=\"ngModel\" ngModel\n           name=\"key\" id=\"searchTitolo\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Titolo\" required>\n        </form>\n      </div>\n\n      <div style=\"padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerAutore(key2.value)\" #key2=\"ngModel\" ngModel\n           name=\"key2\" id=\"searchAutore\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Autore\" required>\n        </form>        \n      </div>\n\n      <div style=\"padding-right: 20px;\">\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n            <select class=\"form-select\" name=\"subject\" aria-label=\"Subject\" required [(ngModel)]=\"searchCategoria\" id=\"selectCategoria\">\n              <option value=\"\" disabled selected hidden>Ricerca per Categoria</option>\n              <option value=\"\" disabled selected >Seleziona una Categoria</option>\n              <ng-container *ngFor=\"let categoria of categorie\">\n                <option [ngValue]=\"categoria.nome_categoria\">{{categoria!.nome_categoria}}</option>\n              </ng-container>\n            </select>\n        </form>\n      </div>\n\n      <div>\n        <button class=\"button-16\" (click)=\"ricercaPostPerCategoria(searchCategoria!)\">Cerca</button>\n      </div>\n\n      <div class=\"toolbar-sorter sorter\">\n        <label class=\"sorter-label\" for=\"sorter\">Ordina per</label>\n        <select id=\"sorter\" data-role=\"sorter\" class=\"sorter-options\" required [(ngModel)]=\"orderBy\">\n          <option value=\"position\" selected=\"selected\">Posizione</option>\n          <option value=\"name\">Titolo Articolo</option>\n          <option value=\"date\">Data Inserimento</option>\n        </select>\n      </div>\n\n    </div>    \n\n    <div *ngIf=\"noPost\" class=\"col-lg-12 col-md-12 col-xl-12\">\n      <div class=\"alert alert-info\" role=\"alert\">\n        <h4 class=\"alert-heading\">NESSUN ARTICOLO TROVATO!</h4>\n        <p>No Posts were found.</p>\n      </div>\n    </div>\n\n  </header>\n\n  <!-- tramite la angular class indichiamo che la classe cambia nel momento in cui no-posts diventa true\n  e noPost diventa true quando non ci sono posts da mostrare. -->\n  <div class=\"container\" [ngClass]=\"{'no-posts': noPost}\">\n    <div class=\"row\">\n      <!-- paginate: Questa è la pipe di paginazione fornita dal modulo ngx-pagination. Una pipe è una funzione \n        che può essere utilizzata per trasformare i dati prima di visualizzarli. La pipe paginate gestisce la \n        suddivisione dei dati in pagine in base ai parametri specificati. L'oggetto che passiamo alla pipe è tra le {} -->\n      <div class=\"col-12 col-md-4\" *ngFor=\"let post of (listaPost | paginate: { itemsPerPage: 9, currentPage: currentPage })!\">\n        \n        <app-singolo-post [post]=\"post\"></app-singolo-post>\n        \n        <div *ngIf=\"this.utente\" id=\"contenuto\" style=\"margin-left: 5px;\">\n          <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"aggiungiPreferito(post)\">Aggiungi ai Preferiti</button>\n        </div>\n  \n      </div>\n    </div>\n  </div>\n  \n  <div class=\"pagination-container\">\n    <pagination-controls (pageChange)=\"currentPage = $event\"></pagination-controls>\n  </div>\n\n</section>\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}