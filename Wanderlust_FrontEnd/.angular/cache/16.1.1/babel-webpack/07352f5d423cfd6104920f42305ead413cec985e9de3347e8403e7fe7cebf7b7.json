{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Post } from 'src/app/model/post/post';\nexport let InfoPostComponent = class InfoPostComponent {\n  constructor(route, service, router) {\n    this.route = route;\n    this.service = service;\n    this.router = router;\n    this.post = new Post();\n    this.id = 0;\n    this.listaImmagini = [];\n  }\n  ngOnInit() {\n    // snapshot è una proprietà dell'oggetto route che rappresenta uno snapshot dell'attuale stato dell'URL \n    // dell'applicazione in un dato momento. Consente di accedere ai parametri presenti nell'URL.\n    // la stringa di codice assegna il valore del parametro \"id\" presente nell'URL corrente alla \n    // proprietà id dell'oggetto corrente\n    this.id = this.route.snapshot.params['id'];\n    this.service.getAutorePostById(this.post.id_post).subscribe({\n      next: response => {\n        this.autore = response;\n        this.service.getImmaginiPostById(this.post.id_post).subscribe({\n          next: responseImage => {\n            this.listaImmagini = responseImage.immaginiAssociate;\n            for (let i = 0; i < this.listaImmagini.length; i++) {\n              if (this.immagineURL !== 'null') {\n                //credo qui vada corretto con this.listaImmagini[i]\n                this.immagineURL = this.listaImmagini[i].url;\n                break; // Per assegnare solo la prima immagine non-null\n              }\n            }\n          },\n\n          error: error => console.log(error)\n        });\n      },\n      error: error => console.log(error)\n    });\n    this.showInfoPost();\n  }\n  showInfoPost() {\n    this.service.getPostById(this.id).subscribe({\n      next: data => {\n        console.log(data);\n        this.post = data;\n      },\n      error: error => console.log(error)\n    });\n  }\n  gotoListaPost() {\n    this.router.navigate(['/listapost']);\n  }\n};\nInfoPostComponent = __decorate([Component({\n  selector: 'app-info-post',\n  templateUrl: './info-post.component.html',\n  styleUrls: ['./info-post.component.css']\n})], InfoPostComponent);","map":{"version":3,"names":["Component","Post","InfoPostComponent","constructor","route","service","router","post","id","listaImmagini","ngOnInit","snapshot","params","getAutorePostById","id_post","subscribe","next","response","autore","getImmaginiPostById","responseImage","immaginiAssociate","i","length","immagineURL","url","error","console","log","showInfoPost","getPostById","data","gotoListaPost","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\info-post\\info-post.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Immagine } from 'src/app/model/immagine/immagine';\nimport { Post } from 'src/app/model/post/post';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-info-post',\n  templateUrl: './info-post.component.html',\n  styleUrls: ['./info-post.component.css']\n})\nexport class InfoPostComponent implements OnInit{\n  post?: Post = new Post();\n  private id = 0;\n\n  autore?: String;\n  listaImmagini: Immagine[] = [];\n  immagineURL?: string;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private router: Router) {}\n\n\n  ngOnInit(): void {\n    // snapshot è una proprietà dell'oggetto route che rappresenta uno snapshot dell'attuale stato dell'URL \n    // dell'applicazione in un dato momento. Consente di accedere ai parametri presenti nell'URL.\n    // la stringa di codice assegna il valore del parametro \"id\" presente nell'URL corrente alla \n    // proprietà id dell'oggetto corrente\n    this.id = this.route.snapshot.params['id'];\n\n    this.service.getAutorePostById(this.post!.id_post!)\n    .subscribe({\n      next: (response) => {\n        this.autore = response;\n\n        this.service.getImmaginiPostById(this.post!.id_post!)\n                .subscribe({\n                  next: (responseImage) => {\n                    this.listaImmagini = responseImage.immaginiAssociate!;\n                    for (let i = 0; i < this.listaImmagini.length; i++) {\n                      if(this.immagineURL !== 'null'){ //credo qui vada corretto con this.listaImmagini[i]\n                        this.immagineURL = this.listaImmagini[i].url;\n                        break; // Per assegnare solo la prima immagine non-null\n                      }\n                    }\n                    \n                  },                  \n                  error: (error) => console.log(error)\n                });\n\n      },\n      error: (error) => console.log(error)\n    });\n\n    this.showInfoPost();\n  }\n\n  showInfoPost(){\n    this.service\n      .getPostById(this.id)\n      .subscribe(\n        {\n          next: data => {\n                  console.log(data);\n                  this.post = data;\n                },\n          error: error => console.log(error)\n        }\n      );\n\n  }\n\n  gotoListaPost() {\n    this.router.navigate(['/listapost']);\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,IAAI,QAAQ,yBAAyB;AASvC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAQ5BC,YAAoBC,KAAqB,EAAUC,OAAoB,EAAUC,MAAc;IAA3E,KAAAF,KAAK,GAALA,KAAK;IAA0B,KAAAC,OAAO,GAAPA,OAAO;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAPvF,KAAAC,IAAI,GAAU,IAAIN,IAAI,EAAE;IAChB,KAAAO,EAAE,GAAG,CAAC;IAGd,KAAAC,aAAa,GAAe,EAAE;EAGoE;EAGlGC,QAAQA,CAAA;IACN;IACA;IACA;IACA;IACA,IAAI,CAACF,EAAE,GAAG,IAAI,CAACJ,KAAK,CAACO,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAE1C,IAAI,CAACP,OAAO,CAACQ,iBAAiB,CAAC,IAAI,CAACN,IAAK,CAACO,OAAQ,CAAC,CAClDC,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACC,MAAM,GAAGD,QAAQ;QAEtB,IAAI,CAACZ,OAAO,CAACc,mBAAmB,CAAC,IAAI,CAACZ,IAAK,CAACO,OAAQ,CAAC,CAC5CC,SAAS,CAAC;UACTC,IAAI,EAAGI,aAAa,IAAI;YACtB,IAAI,CAACX,aAAa,GAAGW,aAAa,CAACC,iBAAkB;YACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACb,aAAa,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;cAClD,IAAG,IAAI,CAACE,WAAW,KAAK,MAAM,EAAC;gBAAE;gBAC/B,IAAI,CAACA,WAAW,GAAG,IAAI,CAACf,aAAa,CAACa,CAAC,CAAC,CAACG,GAAG;gBAC5C,MAAM,CAAC;;;UAIb,CAAC;;UACDC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;SACpC,CAAC;MAEZ,CAAC;MACDA,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK;KACpC,CAAC;IAEF,IAAI,CAACG,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACxB,OAAO,CACTyB,WAAW,CAAC,IAAI,CAACtB,EAAE,CAAC,CACpBO,SAAS,CACR;MACEC,IAAI,EAAEe,IAAI,IAAG;QACLJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;QACjB,IAAI,CAACxB,IAAI,GAAGwB,IAAI;MAClB,CAAC;MACPL,KAAK,EAAEA,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK;KAClC,CACF;EAEL;EAEAM,aAAaA,CAAA;IACX,IAAI,CAAC1B,MAAM,CAAC2B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;CAED;AAhEY/B,iBAAiB,GAAAgC,UAAA,EAL7BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWnC,iBAAiB,CAgE7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}