{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let SingoloPostComponent = class SingoloPostComponent {\n  constructor(route, service, serviceUtente, router) {\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.listaImmagini = [];\n    this.isContentExpanded = false;\n  }\n  ngOnInit() {\n    this.setDataFormat();\n    this.service.getAutorePostById(this.post.id_post).subscribe({\n      next: response => {\n        this.autore = response;\n        this.service.getCategoriePostById(this.post.id_post).subscribe({\n          next: responseCategory => {\n            this.categorie = responseCategory;\n            /*  Nel caso di piu categorie\n                \n                const keys = Object.keys(responseCategory);\n                for (let i = 0; i < keys.length; i++) {\n                  const key = keys[i];\n                  this[`categoria${i + 1}`] = responseCategory[key];\n                }\n             *\n             */\n            this.service.getImmaginiPostById(this.post.id_post).subscribe({\n              next: responseImage => {\n                this.listaImmagini = responseImage.immaginiAssociate;\n                for (let i = 0; i < this.listaImmagini.length; i++) {\n                  if (this.immagineURL !== 'null') {\n                    //credo qui vada corretto con this.listaImmagini[i]\n                    this.immagineURL = this.listaImmagini[i].url;\n                    break; // Per assegnare solo la prima immagine non-null\n                  }\n                }\n              },\n\n              error: error => console.log(error)\n            });\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => console.log(error)\n    });\n  }\n  setDataFormat() {\n    const currentDatePost = this.post.data;\n    // Estrai il giorno, il mese e l'anno dalla data corrente\n    const day = currentDatePost.getDate().toString().padStart(2, '0'); // Aggiunge lo zero iniziale se il giorno è a una sola cifra\n    const month = (currentDatePost.getMonth() + 1).toString().padStart(2, '0'); // Il mese in JavaScript è indicizzato da 0 (Gennaio) a 11 (Dicembre), quindi aggiungi 1\n    const year = currentDatePost.getFullYear().toString();\n    // Crea la stringa con il formato giorno-mese-anno\n    const formattedDate = `${day}-${month}-${year}`;\n    this.dataPost = formattedDate;\n  }\n  toggleContentExpand() {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n  openPost() {}\n};\n__decorate([Input()], SingoloPostComponent.prototype, \"post\", void 0);\nSingoloPostComponent = __decorate([Component({\n  selector: 'app-singolo-post',\n  templateUrl: './singolo-post.component.html',\n  styleUrls: ['./singolo-post.component.css']\n})], SingoloPostComponent);","map":{"version":3,"names":["Component","Input","SingoloPostComponent","constructor","route","service","serviceUtente","router","listaImmagini","isContentExpanded","ngOnInit","setDataFormat","getAutorePostById","post","id_post","subscribe","next","response","autore","getCategoriePostById","responseCategory","categorie","getImmaginiPostById","responseImage","immaginiAssociate","i","length","immagineURL","url","error","console","log","currentDatePost","data","day","getDate","toString","padStart","month","getMonth","year","getFullYear","formattedDate","dataPost","toggleContentExpand","openPost","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\singolo-post\\singolo-post.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Immagine } from 'src/app/model/immagine/immagine';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-singolo-post',\n  templateUrl: './singolo-post.component.html',\n  styleUrls: ['./singolo-post.component.css']\n})\nexport class SingoloPostComponent implements OnInit{\n  @Input() post?: Post;\n  autore?: String;\n  categorie?: String;\n  listaImmagini: Immagine[] = [];\n  immagineURL?: string;\n  dataPost?: string;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente: UtenteService , \n    private router: Router) { }\n  \n  ngOnInit(): void {\n    this.setDataFormat();\n\n    this.service.getAutorePostById(this.post!.id_post!)\n    .subscribe({\n      next: (response) => {\n        this.autore = response;\n\n        this.service.getCategoriePostById(this.post!.id_post!)\n          .subscribe({\n            next: (responseCategory) => {\n              this.categorie = responseCategory;\n              \n              /*  Nel caso di piu categorie\n                  \n                  const keys = Object.keys(responseCategory);\n                  for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this[`categoria${i + 1}`] = responseCategory[key];\n                  }\n               * \n               */\n\n              this.service.getImmaginiPostById(this.post!.id_post!)\n                .subscribe({\n                  next: (responseImage) => {\n                    this.listaImmagini = responseImage.immaginiAssociate!;\n                    for (let i = 0; i < this.listaImmagini.length; i++) {\n                      if(this.immagineURL !== 'null'){ //credo qui vada corretto con this.listaImmagini[i]\n                        this.immagineURL = this.listaImmagini[i].url;\n                        break; // Per assegnare solo la prima immagine non-null\n                      }\n                    }\n                    \n                  },\n                  error: (error) => console.log(error)\n                });                                                 \n            },\n\n            error: (error) => console.log(error)\n          });\n      },\n\n      error: (error) => console.log(error)\n    });\n  }\n\n  setDataFormat(){\n    const currentDatePost = this.post!.data!;\n\n    // Estrai il giorno, il mese e l'anno dalla data corrente\n    const day = currentDatePost.getDate().toString().padStart(2, '0'); // Aggiunge lo zero iniziale se il giorno è a una sola cifra\n    const month = (currentDatePost.getMonth() + 1).toString().padStart(2, '0'); // Il mese in JavaScript è indicizzato da 0 (Gennaio) a 11 (Dicembre), quindi aggiungi 1\n    const year = currentDatePost.getFullYear().toString();\n\n    // Crea la stringa con il formato giorno-mese-anno\n    const formattedDate = `${day}-${month}-${year}`;\n\n    this.dataPost = formattedDate;\n  }\n\n  isContentExpanded: boolean = false;\n\n  toggleContentExpand(): void {\n    this.isContentExpanded = !this.isContentExpanded;\n  }\n\n  openPost(){\n    \n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}