{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { Utente } from 'src/app/model/utente/utente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/post-Service/post.service\";\nimport * as i3 from \"src/app/services/utente-Service/utente.service\";\nimport * as i4 from \"src/app/services/categoria-Service/categoria.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"ngx-pagination\";\nimport * as i8 from \"../singolo-post/singolo-post.component\";\nfunction ListaPostComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23)(2, \"h4\", 24);\n    i0.ɵɵtext(3, \"NESSUN ARTICOLO TROVATO!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"No Posts were found.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ListaPostComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_22_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.cambioOrdine(ctx_r5.orderBy));\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 26);\n    i0.ɵɵelement(2, \"path\", 27);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_23_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.cambioOrdine(ctx_r7.orderBy));\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 26);\n    i0.ɵɵelement(2, \"path\", 28);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"h1\");\n    i0.ɵɵtext(2, \"CIAO\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_29_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_29_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const post_r9 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.aggiungiPreferito(post_r9));\n    });\n    i0.ɵɵtext(2, \"Aggiungi ai Preferiti\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelement(1, \"app-singolo-post\", 31);\n    i0.ɵɵtemplate(2, ListaPostComponent_div_29_div_2_Template, 3, 0, \"div\", 32);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const post_r9 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"post\", post_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.utente);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"no-posts\": a0\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    itemsPerPage: 9,\n    currentPage: a1\n  };\n};\nexport class ListaPostComponent {\n  constructor(route, service, serviceUtente, router, serviceCategoria) {\n    // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n    // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n    // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n    // del select.\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.serviceCategoria = serviceCategoria;\n    this.listaPost = [];\n    this.utente = new Utente();\n    this.listaPostBackup = [];\n    this.categorie = [];\n    this.currentPage = 1;\n    this.noPost = false;\n    this.cresc = false;\n    this.espandiFiltri = false;\n    // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n    // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n    // sarà selezionato di default nel select.\n    this.searchCategoria = ''; //risolviamo con valore di Default\n  }\n\n  ngOnInit() {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato'));\n    this.service.getAllPosts().subscribe({\n      next: response => {\n        this.listaPost = response;\n        this.listaPostBackup = response;\n        this.serviceCategoria.getAllCategorie().subscribe({\n          next: data => {\n            console.log(data);\n            this.categorie = data;\n          },\n          error: error => console.log(error)\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n  aggiungiPreferito(post) {\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/', 'listapost']).then(() => window.location.reload());\n      },\n      error: error => console.log(error)\n    });\n  }\n  ricercaPostPerTitolo(key) {\n    console.log(key);\n    const results = [];\n    for (const post of this.listaPost) {\n      if (post.titolo.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  ricercaPostPerAutore(key) {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: autori => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        this.listaPost = results;\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ricercaPostPerCategoria(key) {\n    console.log(key);\n    const results = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: categorie => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n          if (this.categoryPost.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: err => console.log(err)\n    });\n  }\n  ordinamentoPost(tipoOrdinamento) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post - b.id_post);\n    } else if (tipoOrdinamento === 'position' && this.cresc === false) {\n      this.listaPost.sort((a, b) => b.id_post - a.id_post);\n    }\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo.localeCompare(a.titolo));\n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo.localeCompare(b.titolo));\n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data).getTime();\n        const dateB = new Date(b.data).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder) {\n    if (this.cresc === true) {\n      this.cresc = false;\n    } else if (this.cresc === false) {\n      this.cresc = true;\n    }\n    this.ordinamentoPost(changeOrder);\n  }\n  openFilter() {\n    this.espandiFiltri = true;\n  }\n  closeFilter() {\n    this.espandiFiltri = false;\n  }\n}\nListaPostComponent.ɵfac = function ListaPostComponent_Factory(t) {\n  return new (t || ListaPostComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.UtenteService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.CategoriaService));\n};\nListaPostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListaPostComponent,\n  selectors: [[\"app-lista-post\"]],\n  decls: 33,\n  vars: 14,\n  consts: [[\"id\", \"wrapper\"], [1, \"page-header\"], [1, \"h1\", \"page-title\"], [1, \"d-flex\"], [\"class\", \"col-lg-12 col-md-12 col-xl-12\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"collapsible\", 3, \"click\"], [1, \"flex-grow-1\"], [1, \"toolbar-sorter\", \"sorter\"], [\"for\", \"sorter\", 1, \"sorter-label\"], [\"id\", \"sorter\", \"data-role\", \"sorter\", \"required\", \"\", 1, \"sorter-options\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"value\", \"position\", \"selected\", \"selected\"], [\"value\", \"name\"], [\"value\", \"date\"], [\"style\", \"cursor: pointer; display: contents;\", 3, \"click\", 4, \"ngIf\"], [1, \"filter-posts-container\"], [\"class\", \"filters-column\", 4, \"ngIf\"], [1, \"posts-column\"], [1, \"container\", 3, \"ngClass\"], [1, \"row\"], [\"class\", \"col-12 col-md-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"pagination-container\"], [3, \"pageChange\"], [1, \"col-lg-12\", \"col-md-12\", \"col-xl-12\"], [\"role\", \"alert\", 1, \"alert\", \"alert-info\"], [1, \"alert-heading\"], [2, \"cursor\", \"pointer\", \"display\", \"contents\", 3, \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"height\", \"1em\", \"viewBox\", \"0 0 448 512\"], [\"d\", \"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\"], [\"d\", \"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"], [1, \"filters-column\"], [1, \"col-12\", \"col-md-4\"], [3, \"post\"], [\"id\", \"contenuto\", \"style\", \"margin-left: 5px;\", 4, \"ngIf\"], [\"id\", \"contenuto\", 2, \"margin-left\", \"5px\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"]],\n  template: function ListaPostComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"header\", 1)(2, \"h1\", 2)(3, \"span\");\n      i0.ɵɵtext(4, \"I Racconti dei Viaggiatori\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"div\", 3);\n      i0.ɵɵtemplate(6, ListaPostComponent_div_6_Template, 6, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\")(9, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function ListaPostComponent_Template_button_click_9_listener() {\n        return ctx.openFilter();\n      });\n      i0.ɵɵtext(10, \" Filtri \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(11, \"div\", 6);\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"label\", 8);\n      i0.ɵɵtext(14, \"Ordina per\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"select\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_select_ngModelChange_15_listener($event) {\n        return ctx.orderBy = $event;\n      })(\"change\", function ListaPostComponent_Template_select_change_15_listener() {\n        return ctx.ordinamentoPost(ctx.orderBy);\n      });\n      i0.ɵɵelementStart(16, \"option\", 10);\n      i0.ɵɵtext(17, \"Posizione\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"option\", 11);\n      i0.ɵɵtext(19, \"Titolo Articolo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"option\", 12);\n      i0.ɵɵtext(21, \"Data Inserimento\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(22, ListaPostComponent_div_22_Template, 3, 0, \"div\", 13);\n      i0.ɵɵtemplate(23, ListaPostComponent_div_23_Template, 3, 0, \"div\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 14);\n      i0.ɵɵtemplate(25, ListaPostComponent_div_25_Template, 3, 0, \"div\", 15);\n      i0.ɵɵelementStart(26, \"div\", 16)(27, \"div\", 17)(28, \"div\", 18);\n      i0.ɵɵtemplate(29, ListaPostComponent_div_29_Template, 3, 2, \"div\", 19);\n      i0.ɵɵpipe(30, \"paginate\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(31, \"footer\", 20)(32, \"pagination-controls\", 21);\n      i0.ɵɵlistener(\"pageChange\", function ListaPostComponent_Template_pagination_controls_pageChange_32_listener($event) {\n        return ctx.currentPage = $event;\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.noPost);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngModel\", ctx.orderBy);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", !ctx.cresc);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.cresc);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.espandiFiltri);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.noPost));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(30, 7, ctx.listaPost, i0.ɵɵpureFunction1(12, _c1, ctx.currentPage)));\n    }\n  },\n  dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.RequiredValidator, i6.NgModel, i7.PaginationControlsComponent, i8.SingoloPostComponent, i7.PaginatePipe],\n  styles: [\"#wrapper[_ngcontent-%COMP%] {\\n    position: relative;\\n    min-height: 100vh;\\n}\\n\\n#contenuto[_ngcontent-%COMP%] {\\n    padding-bottom: 50px;\\n}\\n\\n.no-posts[_ngcontent-%COMP%] {\\n    height: 100vh;\\n  }\\n\\n.pagination-container[_ngcontent-%COMP%]{\\n    text-align: -webkit-center;    \\n}\\n\\n.h1[_ngcontent-%COMP%]{\\n    margin-top: 18px;\\n    margin-bottom: 2.5rem;\\n    font-weight: 500;\\n    line-height: 1.2;\\n    color: var(--bs-heading-color);\\n    font-size: 3.5rem;\\n    text-align: -webkit-center;\\n    text-transform: capitalize;\\n    font-family: monospace;\\n}\\n\\n#searchTitolo[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchAutore[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n#searchCategoria[_ngcontent-%COMP%]{\\n    width: 100%;\\n}\\n\\n\\n.button-16[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border: 1px solid #f8f9fa;\\n  border-radius: 4px;\\n  color: #3c4043;\\n  cursor: pointer;\\n  font-family: arial,sans-serif;\\n  font-size: 14px;\\n  height: 36px;\\n  line-height: 27px;\\n  min-width: 54px;\\n  padding: 0 16px;\\n  text-align: center;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  touch-action: manipulation;\\n  white-space: pre;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:hover {\\n  border-color: #dadce0;\\n  box-shadow: rgba(0, 0, 0, .1) 0 1px 1px;\\n  color: #202124;\\n}\\n\\n.button-16[_ngcontent-%COMP%]:focus {\\n  border-color: #4285f4;\\n  outline: none;\\n}\\n\\n\\n\\n\\n.filter-posts-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: flex-start; \\n\\n}\\n\\n.filters-column[_ngcontent-%COMP%] {\\n  flex: 0.4; \\n\\n  padding: 10px; \\n\\n  border-right: 1px solid #ccc; \\n\\n}\\n\\n.posts-column[_ngcontent-%COMP%] {\\n  flex: 2; \\n\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0YS1wb3N0L2xpc3RhLXBvc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0VBQ2Y7O0FBRUY7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsOEJBQThCO0lBQzlCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7O0FBR0E7RUFDRSx5QkFBeUI7RUFDekIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2QsZUFBZTtFQUNmLDZCQUE2QjtFQUM3QixlQUFlO0VBQ2YsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIseUJBQXlCO0VBQ3pCLDBCQUEwQjtFQUMxQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsdUNBQXVDO0VBQ3ZDLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtBQUNmOztBQUVBLGdDQUFnQzs7QUFFaEM7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCLEVBQUUsaUNBQWlDO0FBQzVEOztBQUVBO0VBQ0UsU0FBUyxFQUFFLHNEQUFzRDtFQUNqRSxhQUFhLEVBQUUseUNBQXlDO0VBQ3hELDRCQUE0QixFQUFFLDBDQUEwQztBQUMxRTs7QUFFQTtFQUNFLE9BQU8sRUFBRSxvREFBb0Q7QUFDL0QiLCJzb3VyY2VzQ29udGVudCI6WyIjd3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxufVxyXG5cclxuI2NvbnRlbnV0byB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNTBweDtcclxufVxyXG5cclxuLm5vLXBvc3RzIHtcclxuICAgIGhlaWdodDogMTAwdmg7XHJcbiAgfVxyXG5cclxuLnBhZ2luYXRpb24tY29udGFpbmVye1xyXG4gICAgdGV4dC1hbGlnbjogLXdlYmtpdC1jZW50ZXI7ICAgIFxyXG59XHJcblxyXG4uaDF7XHJcbiAgICBtYXJnaW4tdG9wOiAxOHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMi41cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbiAgICBjb2xvcjogdmFyKC0tYnMtaGVhZGluZy1jb2xvcik7XHJcbiAgICBmb250LXNpemU6IDMuNXJlbTtcclxuICAgIHRleHQtYWxpZ246IC13ZWJraXQtY2VudGVyO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XHJcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xyXG59XHJcblxyXG4jc2VhcmNoVGl0b2xve1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbiNzZWFyY2hBdXRvcmV7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuI3NlYXJjaENhdGVnb3JpYXtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5cclxuLmJ1dHRvbi0xNiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZjhmOWZhO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBjb2xvcjogIzNjNDA0MztcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgZm9udC1mYW1pbHk6IGFyaWFsLHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGhlaWdodDogMzZweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4td2lkdGg6IDU0cHg7XHJcbiAgcGFkZGluZzogMCAxNnB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB1c2VyLXNlbGVjdDogbm9uZTtcclxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xyXG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xyXG4gIHdoaXRlLXNwYWNlOiBwcmU7XHJcbn1cclxuXHJcbi5idXR0b24tMTY6aG92ZXIge1xyXG4gIGJvcmRlci1jb2xvcjogI2RhZGNlMDtcclxuICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIC4xKSAwIDFweCAxcHg7XHJcbiAgY29sb3I6ICMyMDIxMjQ7XHJcbn1cclxuXHJcbi5idXR0b24tMTY6Zm9jdXMge1xyXG4gIGJvcmRlci1jb2xvcjogIzQyODVmNDtcclxuICBvdXRsaW5lOiBub25lO1xyXG59XHJcblxyXG4vKiBQb3NpemlvbmFtZW50byBGaWx0cmktUG9zdHMgKi9cclxuXHJcbi5maWx0ZXItcG9zdHMtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OyAvKiBBbGxpbmVhIGlsIGNvbnRlbnV0byBpbiBhbHRvICovXHJcbn1cclxuXHJcbi5maWx0ZXJzLWNvbHVtbiB7XHJcbiAgZmxleDogMC40OyAvKiBPY2N1cGEgbGEgcGFydGUgc2luaXN0cmEgZGVsbG8gc3BhemlvIGRpc3BvbmliaWxlICovXHJcbiAgcGFkZGluZzogMTBweDsgLyogQWdnaXVuZ2kgc3BhemlvIGF0dG9ybm8gYWwgY29udGVudXRvICovXHJcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2NjYzsgLyogQWdnaXVuZ2kgdW5hIGxpbmVhIGRpdmlzb3JpYSBhIGRlc3RyYSAqL1xyXG59XHJcblxyXG4ucG9zdHMtY29sdW1uIHtcclxuICBmbGV4OiAyOyAvKiBPY2N1cGEgbGEgcGFydGUgZGVzdHJhIGRlbGxvIHNwYXppbyBkaXNwb25pYmlsZSAqL1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["forkJoin","Utente","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ListaPostComponent_div_22_Template_div_click_0_listener","ɵɵrestoreView","_r6","ctx_r5","ɵɵnextContext","ɵɵresetView","cambioOrdine","orderBy","ɵɵnamespaceSVG","ɵɵelement","ListaPostComponent_div_23_Template_div_click_0_listener","_r8","ctx_r7","ListaPostComponent_div_29_div_2_Template_button_click_1_listener","_r13","post_r9","$implicit","ctx_r11","aggiungiPreferito","ɵɵtemplate","ListaPostComponent_div_29_div_2_Template","ɵɵadvance","ɵɵproperty","ctx_r4","utente","ListaPostComponent","constructor","route","service","serviceUtente","router","serviceCategoria","listaPost","listaPostBackup","categorie","currentPage","noPost","cresc","espandiFiltri","searchCategoria","ngOnInit","JSON","parse","sessionStorage","getItem","getAllPosts","subscribe","next","response","getAllCategorie","data","console","log","error","alert","message","post","addPreferitoUtenteById","id_utente","navigate","then","window","location","reload","ricercaPostPerTitolo","key","results","titolo","toLowerCase","indexOf","push","length","ricercaPostPerAutore","observables","map","getAutorePostById","id_post","autori","i","autore","trim","err","ricercaPostPerCategoria","getCategoriePostById","categoryPost","ordinamentoPost","tipoOrdinamento","sort","a","b","localeCompare","dateA","Date","getTime","dateB","changeOrder","openFilter","closeFilter","ɵɵdirectiveInject","i1","ActivatedRoute","i2","PostService","i3","UtenteService","Router","i4","CategoriaService","selectors","decls","vars","consts","template","ListaPostComponent_Template","rf","ctx","ListaPostComponent_div_6_Template","ListaPostComponent_Template_button_click_9_listener","ListaPostComponent_Template_select_ngModelChange_15_listener","$event","ListaPostComponent_Template_select_change_15_listener","ListaPostComponent_div_22_Template","ListaPostComponent_div_23_Template","ListaPostComponent_div_25_Template","ListaPostComponent_div_29_Template","ListaPostComponent_Template_pagination_controls_pageChange_32_listener","ɵɵpureFunction1","_c0","ɵɵpipeBind2","_c1"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.ts","C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { Categoria } from 'src/app/model/categoria/categoria';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { CategoriaService } from 'src/app/services/categoria-Service/categoria.service';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})\n\nexport class ListaPostComponent implements OnInit{\n  listaPost: Post[] = [];\n  utente: Utente = new Utente();\n  listaPostBackup: Post[] = [];\n  categorie?: Categoria[] = [];\n\n  currentPage: number = 1;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente:UtenteService,\n     private router: Router, private serviceCategoria: CategoriaService){\n\n      // l'attributo [(ngModel)] sta tentando di legare il valore selezionato nel <select> con la variabile \n      // searchCategoria nella tua componente Angular. Quando si utilizza l'approccio di two-way data binding con \n      // [(ngModel)], l'opzione con disabled selected può non funzionare correttamente per l'opzione predefinita \n      // del select.\n\n      // Per risolvere il problema, puoi provare a inizializzare la variabile searchCategoria con un valore \n      // predefinito nella componente Angular o nel suo costruttore. In questo modo, il valore corrispondente \n      // sarà selezionato di default nel select.\n      this.searchCategoria = ''; //risolviamo con valore di Default\n\n  }\n  ngOnInit(): void {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato')!);\n    this.service.getAllPosts()\n      .subscribe(\n        {\n          next: (response: Post[]) => {\n            this.listaPost = response;\n            this.listaPostBackup = response;\n\n            this.serviceCategoria.getAllCategorie().subscribe({\n              next: data => {\n                console.log(data);\n                this.categorie = data;\n              },\n              error: error => console.log(error)\n            })\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        }\n      );\n  }\n\n  aggiungiPreferito(post: Post){\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n    .subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/','listapost']).then\n            (() => window.location.reload());        \n      },\n      error: error => console.log(error)\n    });\n  }\n\n  \n  noPost: boolean = false;\n\n  ricercaPostPerTitolo(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    for (const post of this.listaPost) {\n      if (post.titolo!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  \n  ricercaPostPerAutore(key: string): void {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (autori: string[]) => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results: Post[] = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n  \n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        this.listaPost = results;\n        \n        if (results.length === 0  && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  categoryPost?: string;\n  searchCategoria?: string;\n  \n  ricercaPostPerCategoria(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    const observables = this.listaPost.map(post => this.service.getCategoriePostById(post.id_post!));\n\n    forkJoin(observables).subscribe({\n      next: (categorie: string[]) => {\n        for (let i = 0; i < categorie.length; i++) {\n          this.categoryPost = categorie[i];\n\n          if (this.categoryPost!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n\n        //aggiorniamo i post visibili sulla pagina\n        this.listaPost = results;\n\n        //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n        if (!key) {\n          this.listaPost = this.listaPostBackup;\n        }\n\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: (err) => console.log(err)\n    });\n  }\n\n  orderBy?: string;\n  cresc?: boolean = false;\n\n  ordinamentoPost(tipoOrdinamento: string) {\n    if (tipoOrdinamento === 'position' && this.cresc === true) {\n      this.listaPost.sort((a, b) => a.id_post! - b.id_post!);\n    } else if(tipoOrdinamento === 'position' && this.cresc === false){\n      this.listaPost.sort((a, b) => b.id_post! - a.id_post!);\n    }\n\n    if (tipoOrdinamento === 'name' && this.cresc === true) {\n      this.listaPost.sort((a, b) => b.titolo!.localeCompare(a.titolo!)); \n      // confronto lessicografico di stringhe in ordine crescente\n    } else if (tipoOrdinamento === 'name' && this.cresc === false) {\n      this.listaPost.sort((a, b) => a.titolo!.localeCompare(b.titolo!)); \n      // confronto lessicografico di stringhe in ordine decrescente\n    }\n\n    if (tipoOrdinamento === 'date' && this.cresc === false) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        console.log('Date A:', dateA, 'Date B:', dateB);\n        return dateB - dateA; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    } else if (tipoOrdinamento === 'date' && this.cresc === true) {\n      this.listaPost.sort((a, b) => {\n        const dateA = new Date(a.data!).getTime();\n        const dateB = new Date(b.data!).getTime();\n        return dateA - dateB; //prima il piu recente così\n        //Quando si sottrae dateA da dateB, il risultato sarà un valore positivo se la data di dateB è \n        //successiva a dateA. Questo significa che, nell'ordinamento decrescente, i post con la data di \n        //inserimento più recente verranno posizionati prima nella lista.\n      });\n    }\n  }\n\n  cambioOrdine(changeOrder: string){\n    if(this.cresc === true){\n      this.cresc = false;\n    } else if(this.cresc === false){\n      this.cresc = true;\n    }\n\n    this.ordinamentoPost(changeOrder);\n  }\n\n  espandiFiltri?: boolean = false;\n\n  openFilter(){\n    this.espandiFiltri = true;\n  }\n\n  closeFilter(){\n    this.espandiFiltri = false;\n  }\n    \n}\n","<section id=\"wrapper\">\n\n  <header class=\"page-header\">\n    <h1 class=\"h1 page-title\">\n      <span>I Racconti dei Viaggiatori</span>\n    </h1>\n    \n    <div class=\"d-flex\">\n\n          \n\n    </div>    \n\n    <div *ngIf=\"noPost\" class=\"col-lg-12 col-md-12 col-xl-12\">\n      <div class=\"alert alert-info\" role=\"alert\">\n        <h4 class=\"alert-heading\">NESSUN ARTICOLO TROVATO!</h4>\n        <p>No Posts were found.</p>\n      </div>\n    </div>\n\n  </header>\n\n  <div class=\"d-flex\">\n\n    <!-- Filtri a sinistra -->\n    <div>\n        <button type=\"button\" class=\"collapsible\" (click)=\"openFilter()\">\n            Filtri\n        </button>\n    </div>\n\n    <!-- Spazio flessibile vuoto per separare i filtri dall'ordinamento -->\n    <div class=\"flex-grow-1\"></div>\n\n    <!-- Ordinamento a destra -->\n    <div class=\"toolbar-sorter sorter\">\n\n        <label class=\"sorter-label\" for=\"sorter\">Ordina per</label>\n\n        <select id=\"sorter\" data-role=\"sorter\" class=\"sorter-options\" required [(ngModel)]=\"orderBy\" (change)=\"ordinamentoPost(orderBy!)\">\n            <option value=\"position\" selected=\"selected\">Posizione</option>\n            <option value=\"name\">Titolo Articolo</option>\n            <option value=\"date\">Data Inserimento</option>\n        </select>\n\n        <div *ngIf=\"!cresc\" style=\"cursor: pointer; display: contents;\" (click)=\"cambioOrdine(orderBy!)\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z\" />\n            </svg>\n        </div>\n\n        <div *ngIf=\"cresc\" style=\"cursor: pointer; display: contents;\" (click)=\"cambioOrdine(orderBy!)\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\">\n                <path d=\"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\" />\n            </svg>\n        </div>\n\n    </div>\n  </div>\n\n\n  \n  \n  <div class=\"filter-posts-container\">\n\n    <div class=\"filters-column\" *ngIf=\"espandiFiltri\">\n      <h1>CIAO</h1>\n    </div>\n\n    <div class=\"posts-column\">\n      <!-- tramite la angular class indichiamo che la classe cambia nel momento in cui no-posts diventa true\n      e noPost diventa true quando non ci sono posts da mostrare. -->\n      <div class=\"container\" [ngClass]=\"{'no-posts': noPost}\">\n        <div class=\"row\">\n          <!-- paginate: Questa è la pipe di paginazione fornita dal modulo ngx-pagination. Una pipe è una funzione \n            che può essere utilizzata per trasformare i dati prima di visualizzarli. La pipe paginate gestisce la \n            suddivisione dei dati in pagine in base ai parametri specificati. L'oggetto che passiamo alla pipe è tra le {} -->\n          <div class=\"col-12 col-md-4\" *ngFor=\"let post of (listaPost | paginate: { itemsPerPage: 9, currentPage: currentPage })!\">\n            \n            <app-singolo-post [post]=\"post\"></app-singolo-post>\n            \n            <div *ngIf=\"this.utente\" id=\"contenuto\" style=\"margin-left: 5px;\">\n              <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"aggiungiPreferito(post)\">Aggiungi ai Preferiti</button>\n            </div>\n      \n          </div>\n\n        </div>\n      </div>\n      \n      \n\n    </div>\n  </div>\n\n  <footer class=\"pagination-container\">\n    <pagination-controls (pageChange)=\"currentPage = $event\"></pagination-controls>\n  </footer>\n  \n</section>\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}