{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Se non inserissimo questo codice dovremmo inserirlo in Providers all'interno dell'appComponent\nexport class UtenteService {\n  // angular dependency injection - di tipo constructor injection\n  constructor(http) {\n    this.http = http;\n    //private http: HttpClient: è il path generale che accomuna tutte le richieste a Utente\n    this.baseUrl = 'http://localhost:8080/api/v1';\n  }\n  // REGISTRAZIONE. Lo strano singolo apice si chiama backtick alt-96\n  addUtente(utente) {\n    return this.http.post(`${this.baseUrl}/add/u`, utente);\n  }\n  //LOGIN.\n  loginUtente(utente) {\n    if (this.utente.email === 'gemelli.95@hotmail.it' && this.utente.password === 'Wanderlust_2023') {\n      this.utente.isAdmin = true;\n    } else {\n      this.utente.isAdmin = false;\n    }\n    return this.http.post(`${this.baseUrl}/loginutente`, utente);\n  }\n  // diversamente dai primi due, trattandosi di un \"get\" non mettiamo nulla nelle parentesi,\n  // non sono richiesti parametri in ingresso.\n  // Inoltre è necessario il tipoRestituito Utente[] in quanto anche da BackEnd verrà restituita una Lista\n  getAllUtenti() {\n    return this.http.get(`${this.baseUrl}/utenti`);\n  }\n  getUtenteById(utenteId) {\n    return this.http.get(`${this.baseUrl}/utente/${utenteId}`);\n  }\n  // Se mettessi Object avrei poi bisogno di effettuare un type-casting per accedere alle proprietà\n  // così invece ci risparmiamo questa operazione\n  updateUtente(utente) {\n    return this.http.put(`${this.baseUrl}/update/u`, utente);\n  }\n  // Nel caso del delete, non vogliamo sia restituito nulla, quindi settiamo il tutto a void, ma sarà\n  // necessario passare l'ID dell'utente per agire\n  deleteUtenteById(utenteId) {\n    return this.http.delete(`${this.baseUrl}/delete/u/${utenteId}`);\n  }\n  getArticoliUtenteById(utenteId) {\n    return this.http.get(`${this.baseUrl}/articoliutente/${utenteId}`);\n  }\n  getPreferitiUtenteById(utenteId) {\n    return this.http.get(`${this.baseUrl}/preferitiutente/${utenteId}`);\n  }\n  addPreferitoUtenteById(post, utenteId) {\n    return this.http.post(`${this.baseUrl}/addpreferito/${utenteId}`, post);\n  }\n  removePreferitoUtenteById(postId, utenteId) {\n    return this.http.delete(`${this.baseUrl}/removepreferito/${postId}/${utenteId}`);\n  }\n}\nUtenteService.ɵfac = function UtenteService_Factory(t) {\n  return new (t || UtenteService)(i0.ɵɵinject(i1.HttpClient));\n};\nUtenteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UtenteService,\n  factory: UtenteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UtenteService","constructor","http","baseUrl","addUtente","utente","post","loginUtente","email","password","isAdmin","getAllUtenti","get","getUtenteById","utenteId","updateUtente","put","deleteUtenteById","delete","getArticoliUtenteById","getPreferitiUtenteById","addPreferitoUtenteById","removePreferitoUtenteById","postId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\services\\utente-Service\\utente.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { Observable } from 'rxjs';\nimport { Post } from 'src/app/model/post/post';\n\n// Se non inserissimo questo codice dovremmo inserirlo in Providers all'interno dell'appComponent\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtenteService {\n\n  //private http: HttpClient: è il path generale che accomuna tutte le richieste a Utente\n  private baseUrl = 'http://localhost:8080/api/v1';\n  \n  // angular dependency injection - di tipo constructor injection\n  constructor(private http: HttpClient) { }\n\n  // REGISTRAZIONE. Lo strano singolo apice si chiama backtick alt-96\n  addUtente(utente: Utente): Observable<Utente> {\n    return this.http.post<Utente>(`${this.baseUrl}/add/u`, utente);\n  }\n\n  //LOGIN.\n  loginUtente(utente: Object): Observable<Object> {\n    if (this.utente.email === 'gemelli.95@hotmail.it' && this.utente.password === 'Wanderlust_2023') {\n      this.utente.isAdmin = true;\n    } else {\n      this.utente.isAdmin = false;\n    }\n    return this.http.post<Object>(`${this.baseUrl}/loginutente`, utente);\n  }\n\n  // diversamente dai primi due, trattandosi di un \"get\" non mettiamo nulla nelle parentesi,\n  // non sono richiesti parametri in ingresso.\n  // Inoltre è necessario il tipoRestituito Utente[] in quanto anche da BackEnd verrà restituita una Lista\n  getAllUtenti(): Observable<Utente[]> {\n    return this.http.get<Utente[]>(`${this.baseUrl}/utenti`);\n  }\n\n  getUtenteById(utenteId: number): Observable<Utente>{\n    return this.http.get<Utente>(`${this.baseUrl}/utente/${utenteId}`);\n  }\n\n  // Se mettessi Object avrei poi bisogno di effettuare un type-casting per accedere alle proprietà\n  // così invece ci risparmiamo questa operazione\n  updateUtente(utente: Utente): Observable<Utente> {\n    return this.http.put<Utente>(`${this.baseUrl}/update/u`, utente);\n  }\n\n  // Nel caso del delete, non vogliamo sia restituito nulla, quindi settiamo il tutto a void, ma sarà\n  // necessario passare l'ID dell'utente per agire\n  deleteUtenteById(utenteId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/delete/u/${utenteId}`);\n  }\n\n  getArticoliUtenteById(utenteId: number): Observable<Utente>{\n    return this.http.get<Utente>(`${this.baseUrl}/articoliutente/${utenteId}`);\n  }\n\n  getPreferitiUtenteById(utenteId: number): Observable<Utente>{\n    return this.http.get<Utente>(`${this.baseUrl}/preferitiutente/${utenteId}`);\n  }\n\n  addPreferitoUtenteById(post: Post, utenteId: number): Observable<Utente> {\n    return this.http.post<Utente>(`${this.baseUrl}/addpreferito/${utenteId}`, post);\n  }\n\n  removePreferitoUtenteById(postId: number, utenteId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/removepreferito/${postId}/${utenteId}`);\n  }\n}\n\n\n\n\n// Nella programmazione “reattiva” vengono usati termini quali Observable (colui che viene osservato) e \n// Observer (colui che osserva e controlla). Per iniziare a monitorare uno stream di dati è necessario \n// iscriversi ad esso, e questo viene fatto attraverso il metodo subscribe(). Il metodo subscribe() è \n// un metodo dell’oggetto Observable a cui viene passato come parametro un oggetto Observer.\n\n// Un Observable rappresenta una sequenza di valori asincroni nel tempo ossia modalità di trasmissione \n// dati che non dipende dal compiersi di altri processi.\n\n// All’interno dell’oggetto Observer è possibile definire fino 3 funzioni di callback: next(), error() e \n// complete(). Queste funzioni verranno poi invocate quando:\n// 1) l’Observable emette un valore. È qui che gestiamo i dati ricevuti e compiamo le azioni desiderate.\n// 2) l’Observable emette un’ errore e termina. Possiamo utilizzarla per gestire gli errori.\n// 3) l’Observable viene chiuso e non saranno più emessi valori. È un'opzione facoltativa e viene utilizzata \n//    principalmente per eseguire operazioni di pulizia o di conclusione."],"mappings":";;AAMA;AAIA,OAAM,MAAOA,aAAa;EAKxB;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACQ,KAAAC,OAAO,GAAG,8BAA8B;EAGR;EAExC;EACAC,SAASA,CAACC,MAAc;IACtB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAS,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEE,MAAM,CAAC;EAChE;EAEA;EACAE,WAAWA,CAACF,MAAc;IACxB,IAAI,IAAI,CAACA,MAAM,CAACG,KAAK,KAAK,uBAAuB,IAAI,IAAI,CAACH,MAAM,CAACI,QAAQ,KAAK,iBAAiB,EAAE;MAC/F,IAAI,CAACJ,MAAM,CAACK,OAAO,GAAG,IAAI;KAC3B,MAAM;MACL,IAAI,CAACL,MAAM,CAACK,OAAO,GAAG,KAAK;;IAE7B,OAAO,IAAI,CAACR,IAAI,CAACI,IAAI,CAAS,GAAG,IAAI,CAACH,OAAO,cAAc,EAAEE,MAAM,CAAC;EACtE;EAEA;EACA;EACA;EACAM,YAAYA,CAAA;IACV,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAW,GAAG,IAAI,CAACT,OAAO,SAAS,CAAC;EAC1D;EAEAU,aAAaA,CAACC,QAAgB;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,OAAO,WAAWW,QAAQ,EAAE,CAAC;EACpE;EAEA;EACA;EACAC,YAAYA,CAACV,MAAc;IACzB,OAAO,IAAI,CAACH,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACb,OAAO,WAAW,EAAEE,MAAM,CAAC;EAClE;EAEA;EACA;EACAY,gBAAgBA,CAACH,QAAgB;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,OAAO,aAAaW,QAAQ,EAAE,CAAC;EACvE;EAEAK,qBAAqBA,CAACL,QAAgB;IACpC,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,OAAO,mBAAmBW,QAAQ,EAAE,CAAC;EAC5E;EAEAM,sBAAsBA,CAACN,QAAgB;IACrC,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,OAAO,oBAAoBW,QAAQ,EAAE,CAAC;EAC7E;EAEAO,sBAAsBA,CAACf,IAAU,EAAEQ,QAAgB;IACjD,OAAO,IAAI,CAACZ,IAAI,CAACI,IAAI,CAAS,GAAG,IAAI,CAACH,OAAO,iBAAiBW,QAAQ,EAAE,EAAER,IAAI,CAAC;EACjF;EAEAgB,yBAAyBA,CAACC,MAAc,EAAET,QAAgB;IACxD,OAAO,IAAI,CAACZ,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,OAAO,oBAAoBoB,MAAM,IAAIT,QAAQ,EAAE,CAAC;EACxF;;AA5DWd,aAAa,C;mBAAbA,aAAa,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAb3B,aAAa,C;SAAbA,aAAa;EAAA4B,OAAA,EAAb5B,aAAa,CAAA6B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}