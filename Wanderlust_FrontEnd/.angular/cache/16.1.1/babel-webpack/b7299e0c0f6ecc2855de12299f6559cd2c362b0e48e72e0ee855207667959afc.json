{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { Utente } from 'src/app/model/utente/utente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/post-Service/post.service\";\nimport * as i3 from \"src/app/services/utente-Service/utente.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"ngx-pagination\";\nimport * as i7 from \"../singolo-post/singolo-post.component\";\nfunction ListaPostComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"h4\", 17);\n    i0.ɵɵtext(3, \"NESSUN ARTICOLO TROVATO!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"No Posts were found.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ListaPostComponent_div_17_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function ListaPostComponent_div_17_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const post_r4 = i0.ɵɵnextContext().$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.aggiungiPreferito(post_r4));\n    });\n    i0.ɵɵtext(2, \"Aggiungi ai Preferiti\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListaPostComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelement(1, \"app-singolo-post\", 19);\n    i0.ɵɵtemplate(2, ListaPostComponent_div_17_div_2_Template, 3, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const post_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"post\", post_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.utente);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"no-posts\": a0\n  };\n};\nconst _c1 = function (a1) {\n  return {\n    itemsPerPage: 9,\n    currentPage: a1\n  };\n};\nexport class ListaPostComponent {\n  constructor(route, service, serviceUtente, router) {\n    this.route = route;\n    this.service = service;\n    this.serviceUtente = serviceUtente;\n    this.router = router;\n    this.listaPost = [];\n    this.utente = new Utente();\n    this.listaPostBackup = [];\n    this.currentPage = 1;\n    this.noPost = false;\n  }\n  ngOnInit() {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato'));\n    this.service.getAllPosts().subscribe({\n      next: response => {\n        this.listaPost = response;\n        this.listaPostBackup = response;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n  aggiungiPreferito(post) {\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente.id_utente).subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/', 'listapost']).then(() => window.location.reload());\n      },\n      error: error => console.log(error)\n    });\n  }\n  ricercaPostPerTitolo(key) {\n    console.log(key);\n    const results = [];\n    for (const post of this.listaPost) {\n      if (post.titolo.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n  ricercaPostPerAutore(key) {\n    console.log(key);\n    const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post));\n    forkJoin(observables).subscribe({\n      next: autori => {\n        //costante di appoggio per creare la lista e travasare il risultato in listaPost\n        const results = [];\n        for (let i = 0; i < autori.length; i++) {\n          const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n          console.log(autore);\n          if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n            results.push(this.listaPost[i]);\n          }\n        }\n        this.listaPost = results;\n        if (results.length === 0 && key) {\n          this.noPost = true;\n        } else {\n          this.noPost = false;\n        }\n      },\n      error: err => console.log(err)\n    });\n    //deve stare fuori dal ciclo for, se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n  }\n}\nListaPostComponent.ɵfac = function ListaPostComponent_Factory(t) {\n  return new (t || ListaPostComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.UtenteService), i0.ɵɵdirectiveInject(i1.Router));\n};\nListaPostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListaPostComponent,\n  selectors: [[\"app-lista-post\"]],\n  decls: 21,\n  vars: 10,\n  consts: [[\"id\", \"wrapper\"], [1, \"page-header\"], [1, \"h1\", \"page-title\"], [1, \"d-flex\"], [1, \"form-inline\", \"my-2\", \"my-lg-0\", 2, \"display\", \"inline\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key\", \"id\", \"searchTitolo\", \"placeholder\", \"Ricerca per Titolo\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key\", \"ngModel\"], [\"type\", \"search\", \"ngModel\", \"\", \"name\", \"key2\", \"id\", \"searchAutore\", \"placeholder\", \"Ricerca per Autore\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModelChange\"], [\"key2\", \"ngModel\"], [\"class\", \"col-lg-12 col-md-12 col-xl-12\", 4, \"ngIf\"], [1, \"container\", 3, \"ngClass\"], [1, \"row\"], [\"class\", \"col-12 col-md-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"pagination-container\"], [3, \"pageChange\"], [1, \"col-lg-12\", \"col-md-12\", \"col-xl-12\"], [\"role\", \"alert\", 1, \"alert\", \"alert-info\"], [1, \"alert-heading\"], [1, \"col-12\", \"col-md-4\"], [3, \"post\"], [\"id\", \"contenuto\", \"style\", \"margin-left: 5px;\", 4, \"ngIf\"], [\"id\", \"contenuto\", 2, \"margin-left\", \"5px\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"]],\n  template: function ListaPostComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r9 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"header\", 1)(2, \"h1\", 2)(3, \"span\");\n      i0.ɵɵtext(4, \"I Racconti dei Viaggiatori\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\")(7, \"form\", 4)(8, \"input\", 5, 6);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_8_listener() {\n        i0.ɵɵrestoreView(_r9);\n        const _r0 = i0.ɵɵreference(9);\n        return i0.ɵɵresetView(ctx.ricercaPostPerTitolo(_r0.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\")(11, \"form\", 4)(12, \"input\", 7, 8);\n      i0.ɵɵlistener(\"ngModelChange\", function ListaPostComponent_Template_input_ngModelChange_12_listener() {\n        i0.ɵɵrestoreView(_r9);\n        const _r1 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(ctx.ricercaPostPerAutore(_r1.value));\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(14, ListaPostComponent_div_14_Template, 6, 0, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 10)(16, \"div\", 11);\n      i0.ɵɵtemplate(17, ListaPostComponent_div_17_Template, 3, 2, \"div\", 12);\n      i0.ɵɵpipe(18, \"paginate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 13)(20, \"pagination-controls\", 14);\n      i0.ɵɵlistener(\"pageChange\", function ListaPostComponent_Template_pagination_controls_pageChange_20_listener($event) {\n        return ctx.currentPage = $event;\n      });\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngIf\", ctx.noPost);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, ctx.noPost));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(18, 3, ctx.listaPost, i0.ɵɵpureFunction1(8, _c1, ctx.currentPage)));\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm, i6.PaginationControlsComponent, i7.SingoloPostComponent, i6.PaginatePipe],\n  styles: [\"#wrapper[_ngcontent-%COMP%] {\\n    position: relative;\\n    min-height: 100vh;\\n}\\n\\n#contenuto[_ngcontent-%COMP%] {\\n    padding-bottom: 50px;\\n}\\n\\n.no-posts[_ngcontent-%COMP%] {\\n    height: 100vh;\\n  }\\n\\n.pagination-container[_ngcontent-%COMP%]{\\n    text-align: -webkit-center;    \\n}\\n\\n.h1[_ngcontent-%COMP%]{\\n    margin-top: 18px;\\n    margin-bottom: 2.5rem;\\n    font-weight: 500;\\n    line-height: 1.2;\\n    color: var(--bs-heading-color);\\n    font-size: 3.5rem;\\n    text-align: -webkit-center;\\n    text-transform: capitalize;\\n    font-family: monospace;\\n}\\n\\n#searchTitolo[_ngcontent-%COMP%]{\\n    width: 20%;\\n    margin-left: 20px;\\n    margin-right: 20px;\\n}\\n\\n#searchAutore[_ngcontent-%COMP%]{\\n    width: 20%;\\n    margin-left: 20px;\\n    margin-right: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9saXN0YS1wb3N0L2xpc3RhLXBvc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0VBQ2Y7O0FBRUY7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsOEJBQThCO0lBQzlCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFVBQVU7SUFDVixpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEIiLCJzb3VyY2VzQ29udGVudCI6WyIjd3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxufVxyXG5cclxuI2NvbnRlbnV0byB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNTBweDtcclxufVxyXG5cclxuLm5vLXBvc3RzIHtcclxuICAgIGhlaWdodDogMTAwdmg7XHJcbiAgfVxyXG5cclxuLnBhZ2luYXRpb24tY29udGFpbmVye1xyXG4gICAgdGV4dC1hbGlnbjogLXdlYmtpdC1jZW50ZXI7ICAgIFxyXG59XHJcblxyXG4uaDF7XHJcbiAgICBtYXJnaW4tdG9wOiAxOHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMi41cmVtO1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XHJcbiAgICBjb2xvcjogdmFyKC0tYnMtaGVhZGluZy1jb2xvcik7XHJcbiAgICBmb250LXNpemU6IDMuNXJlbTtcclxuICAgIHRleHQtYWxpZ246IC13ZWJraXQtY2VudGVyO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XHJcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xyXG59XHJcblxyXG4jc2VhcmNoVGl0b2xve1xyXG4gICAgd2lkdGg6IDIwJTtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xyXG59XHJcblxyXG4jc2VhcmNoQXV0b3Jle1xyXG4gICAgd2lkdGg6IDIwJTtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["forkJoin","Utente","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ListaPostComponent_div_17_div_2_Template_button_click_1_listener","ɵɵrestoreView","_r8","post_r4","ɵɵnextContext","$implicit","ctx_r6","ɵɵresetView","aggiungiPreferito","ɵɵelement","ɵɵtemplate","ListaPostComponent_div_17_div_2_Template","ɵɵadvance","ɵɵproperty","ctx_r3","utente","ListaPostComponent","constructor","route","service","serviceUtente","router","listaPost","listaPostBackup","currentPage","noPost","ngOnInit","JSON","parse","sessionStorage","getItem","getAllPosts","subscribe","next","response","error","alert","message","post","addPreferitoUtenteById","id_utente","console","log","navigate","then","window","location","reload","ricercaPostPerTitolo","key","results","titolo","toLowerCase","indexOf","push","length","ricercaPostPerAutore","observables","map","getAutorePostById","id_post","autori","i","autore","trim","err","ɵɵdirectiveInject","i1","ActivatedRoute","i2","PostService","i3","UtenteService","Router","selectors","decls","vars","consts","template","ListaPostComponent_Template","rf","ctx","ListaPostComponent_Template_input_ngModelChange_8_listener","_r9","_r0","ɵɵreference","value","ListaPostComponent_Template_input_ngModelChange_12_listener","_r1","ListaPostComponent_div_14_Template","ListaPostComponent_div_17_Template","ListaPostComponent_Template_pagination_controls_pageChange_20_listener","$event","ɵɵpureFunction1","_c0","ɵɵpipeBind2","_c1"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.ts","C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\lista-post\\lista-post.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { Post } from 'src/app/model/post/post';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { PostService } from 'src/app/services/post-Service/post.service';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-lista-post',\n  templateUrl: './lista-post.component.html',\n  styleUrls: ['./lista-post.component.css']\n})\n\nexport class ListaPostComponent implements OnInit{\n  listaPost: Post[] = [];\n  utente: Utente = new Utente();\n  listaPostBackup: Post[] = [];\n  \n  currentPage: number = 1;\n\n  constructor(private route: ActivatedRoute, private service: PostService, private serviceUtente:UtenteService,\n     private router: Router){\n\n  }\n  ngOnInit(): void {\n    this.utente = JSON.parse(sessionStorage.getItem('utenteloggato')!);\n    this.service.getAllPosts()\n      .subscribe(\n        {\n          next: (response: Post[]) => {\n            this.listaPost = response;\n            this.listaPostBackup = response;\n          },\n          error: (error: HttpErrorResponse) => {\n            alert(error.message)\n          }\n        }\n      );\n  }\n\n  aggiungiPreferito(post: Post){\n    this.serviceUtente.addPreferitoUtenteById(post, this.utente!.id_utente!)\n    .subscribe({\n      next: () => {\n        console.log('Post aggiunto ai preferiti con successo.');\n        this.router.navigate(['/','listapost']).then\n            (() => window.location.reload());        \n      },\n      error: error => console.log(error)\n    });\n  }\n\n  \n  noPost: boolean = false;\n\n  ricercaPostPerTitolo(key: string): void {\n    console.log(key);\n    const results: Post[] = [];\n    for (const post of this.listaPost) {\n      if (post.titolo!.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n        results.push(post);\n      }\n    }\n    //aggiorniamo i post visibili sulla pagina\n    this.listaPost = results;\n    //se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n    if (!key) {\n      this.listaPost = this.listaPostBackup;\n    }\n\n    if (results.length === 0 && key) {\n      this.noPost = true;\n    } else {\n      this.noPost = false;\n    }\n  }\n\n  // forkJoin è un operatore di combinazione in RxJS che combina gli ultimi valori emessi da più Observable in \n  // un unico Observable, ma solo quando tutti gli Observable hanno completato. In pratica, attende che tutti gli \n  // Observable passati come argomenti abbiano emesso un valore e siano stati completati prima di restituire i \n  // risultati combinati.\n\n  // Nel contesto del tuo codice, forkJoin viene utilizzato per affrontare il problema delle chiamate asincrone \n  // sovrapposte all'interno del ciclo for nel metodo ricercaPostPerAutore.\n\n  // ogni chiamata asincrona a this.service.getAutorePostById otterrà i dati relativi a un post specifico. \n  // Quando tutti i dati saranno stati ottenuti, l'Observable restituito da forkJoin emetterà un array con tutti \n  // i nomi degli autori corrispondenti ai post\n\n\n  \n  ricercaPostPerAutore(key: string): void {\n      console.log(key);\n      const observables = this.listaPost.map(post => this.service.getAutorePostById(post.id_post!));\n    \n      forkJoin(observables).subscribe({\n        next: (autori: string[]) => {\n          //costante di appoggio per creare la lista e travasare il risultato in listaPost\n          const results: Post[] = [];\n          for (let i = 0; i < autori.length; i++) {\n            const autore = autori[i].trim(); //perchè io nel JSON faccio restituire esplicitamente nome + \" \" + cognome\n            console.log(autore);\n    \n            if (autore.toLowerCase().indexOf(key.toLowerCase()) !== -1) {\n              results.push(this.listaPost[i]);\n            }\n          }\n\n          this.listaPost = results;\n          \n          if (results.length === 0  && key) {\n            this.noPost = true;\n          } else {\n            this.noPost = false;\n          }\n        },\n        error: (err) => console.log(err)\n      });\n\n      //deve stare fuori dal ciclo for, se non c'è alcuna ricerca effettuata o il risultato è nullo ridammi tutti i post\n      if (!key) {\n        this.listaPost = this.listaPostBackup;\n      }\n\n    }\n\n}\n","<section id=\"wrapper\">\n\n  <header class=\"page-header\">\n    <h1 class=\"h1 page-title\">\n      <span>I Racconti dei Viaggiatori</span>\n    </h1>\n    \n    <div class=\"d-flex\">\n\n      <div>\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerTitolo(key.value)\" #key=\"ngModel\" ngModel\n           name=\"key\" id=\"searchTitolo\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Titolo\" required>\n        </form>\n      </div>\n\n      <div>\n        <form class=\"form-inline my-2 my-lg-0\" style=\"display: inline;\">\n          <input type=\"search\" (ngModelChange)=\"ricercaPostPerAutore(key2.value)\" #key2=\"ngModel\" ngModel\n           name=\"key2\" id=\"searchAutore\" class=\"form-control mr-sm-2\" placeholder=\"Ricerca per Autore\" required>\n        </form>        \n      </div>\n      \n  \n      \n\n    </div>    \n\n    <div *ngIf=\"noPost\" class=\"col-lg-12 col-md-12 col-xl-12\">\n      <div class=\"alert alert-info\" role=\"alert\">\n        <h4 class=\"alert-heading\">NESSUN ARTICOLO TROVATO!</h4>\n        <p>No Posts were found.</p>\n      </div>\n    </div>\n\n  </header>\n\n  <!-- tramite la angular class indichiamo che la classe cambia nel momento in cui no-posts diventa true\n  e noPost diventa true quando non ci sono posts da mostrare. -->\n  <div class=\"container\" [ngClass]=\"{'no-posts': noPost}\">\n    <div class=\"row\">\n      <!-- paginate: Questa è la pipe di paginazione fornita dal modulo ngx-pagination. Una pipe è una funzione \n        che può essere utilizzata per trasformare i dati prima di visualizzarli. La pipe paginate gestisce la \n        suddivisione dei dati in pagine in base ai parametri specificati. L'oggetto che passiamo alla pipe è tra le {} -->\n      <div class=\"col-12 col-md-4\" *ngFor=\"let post of (listaPost | paginate: { itemsPerPage: 9, currentPage: currentPage })!\">\n        \n        <app-singolo-post [post]=\"post\"></app-singolo-post>\n        \n        <div *ngIf=\"this.utente\" id=\"contenuto\" style=\"margin-left: 5px;\">\n          <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"aggiungiPreferito(post)\">Aggiungi ai Preferiti</button>\n        </div>\n  \n      </div>\n    </div>\n  </div>\n  \n  <div class=\"pagination-container\">\n    <pagination-controls (pageChange)=\"currentPage = $event\"></pagination-controls>\n  </div>\n\n</section>\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}