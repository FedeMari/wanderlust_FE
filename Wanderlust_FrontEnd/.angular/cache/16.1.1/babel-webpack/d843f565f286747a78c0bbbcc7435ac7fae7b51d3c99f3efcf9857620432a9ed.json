{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Utente } from 'src/app/model/utente/utente';\nexport let RegistrazioneUtenteComponent = class RegistrazioneUtenteComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.utente = new Utente();\n    this.showMessage = false;\n    this.isPasswordInvalid = false;\n    this.errorMessage = 'La password inserita non è valida.';\n  }\n  ngOnInit() {\n    const video = document.getElementById('background-video');\n    video.play();\n  }\n  onSubmit() {\n    console.log(this.utente);\n    this.saveUtente();\n  }\n  saveUtente() {\n    this.service.addUtente(this.utente).subscribe({\n      next: data => {\n        console.log(data);\n        this.utente = new Utente();\n      },\n      error: error => console.log(error)\n    });\n  }\n  showRegistrationMessage() {\n    this.showMessage = true;\n    // Il messaggio scompare dopo 5 secondi\n    setTimeout(() => {\n      this.showMessage = false;\n    }, 5000);\n  }\n  showErrorPasswordMessage(password) {\n    //viene controllato se il campo Password non è vuoto (this.utente.password) e se la sua lunghezza è \n    //maggiore o uguale a 5 (this.utente.password.length >= 5). Se entrambe le condizioni sono vere, la password è accettata\n    if (this.utente.password && this.utente.password.length >= 5) {} else {\n      this.isPasswordInvalid = true;\n    }\n  }\n};\nRegistrazioneUtenteComponent = __decorate([Component({\n  selector: 'app-registrazione-utente',\n  templateUrl: './registrazione-utente.component.html',\n  styleUrls: ['./registrazione-utente.component.css']\n})], RegistrazioneUtenteComponent);","map":{"version":3,"names":["Component","Utente","RegistrazioneUtenteComponent","constructor","service","router","utente","showMessage","isPasswordInvalid","errorMessage","ngOnInit","video","document","getElementById","play","onSubmit","console","log","saveUtente","addUtente","subscribe","next","data","error","showRegistrationMessage","setTimeout","showErrorPasswordMessage","password","length","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gemel\\Desktop\\Federico\\Progetto Finale\\Wanderlust - FrontEnd\\Wanderlust_FrontEnd\\src\\app\\components\\registrazione-utente\\registrazione-utente.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Utente } from 'src/app/model/utente/utente';\nimport { UtenteService } from 'src/app/services/utente-Service/utente.service';\n\n@Component({\n  selector: 'app-registrazione-utente',\n  templateUrl: './registrazione-utente.component.html',\n  styleUrls: ['./registrazione-utente.component.css']\n})\n\nexport class RegistrazioneUtenteComponent implements OnInit {\n  utente: Utente = new Utente();\n\n  constructor(private service: UtenteService, private router: Router) { }\n\n  ngOnInit(): void {\n    const video = document.getElementById('background-video') as HTMLVideoElement;\n    video.play();\n  }\n\n  onSubmit() : void {\n    console.log(this.utente);\n    this.saveUtente();\n  }\n\n  private saveUtente() {\n      this.service.addUtente(this.utente)\n          .subscribe({\n            next: data => {\n              console.log(data);\n              this.utente = new Utente();\n            },\n            error: error => console.log(error)\n          });  \n  }\n\n  showMessage: boolean = false;\n\n  showRegistrationMessage(): void {\n    this.showMessage = true;\n    // Il messaggio scompare dopo 5 secondi\n    setTimeout(() => {\n      this.showMessage = false;\n    }, 5000);\n  }\n\n  isPasswordInvalid: boolean = false;\n  errorMessage: string = 'La password inserita non è valida.';\n\n  showErrorPasswordMessage(password?: string){\n    //viene controllato se il campo Password non è vuoto (this.utente.password) e se la sua lunghezza è \n    //maggiore o uguale a 5 (this.utente.password.length >= 5). Se entrambe le condizioni sono vere, la password è accettata\n    if(this.utente.password && this.utente.password.length >= 5){\n      \n    }\n    else{\n      this.isPasswordInvalid = true;\n    }\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,MAAM,QAAQ,6BAA6B;AAS7C,WAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAGvCC,YAAoBC,OAAsB,EAAUC,MAAc;IAA9C,KAAAD,OAAO,GAAPA,OAAO;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAF1D,KAAAC,MAAM,GAAW,IAAIL,MAAM,EAAE;IAyB7B,KAAAM,WAAW,GAAY,KAAK;IAU5B,KAAAC,iBAAiB,GAAY,KAAK;IAClC,KAAAC,YAAY,GAAW,oCAAoC;EAlCW;EAEtEC,QAAQA,CAAA;IACN,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAqB;IAC7EF,KAAK,CAACG,IAAI,EAAE;EACd;EAEAC,QAAQA,CAAA;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,MAAM,CAAC;IACxB,IAAI,CAACY,UAAU,EAAE;EACnB;EAEQA,UAAUA,CAAA;IACd,IAAI,CAACd,OAAO,CAACe,SAAS,CAAC,IAAI,CAACb,MAAM,CAAC,CAC9Bc,SAAS,CAAC;MACTC,IAAI,EAAEC,IAAI,IAAG;QACXN,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC;QACjB,IAAI,CAAChB,MAAM,GAAG,IAAIL,MAAM,EAAE;MAC5B,CAAC;MACDsB,KAAK,EAAEA,KAAK,IAAIP,OAAO,CAACC,GAAG,CAACM,KAAK;KAClC,CAAC;EACV;EAIAC,uBAAuBA,CAAA;IACrB,IAAI,CAACjB,WAAW,GAAG,IAAI;IACvB;IACAkB,UAAU,CAAC,MAAK;MACd,IAAI,CAAClB,WAAW,GAAG,KAAK;IAC1B,CAAC,EAAE,IAAI,CAAC;EACV;EAKAmB,wBAAwBA,CAACC,QAAiB;IACxC;IACA;IACA,IAAG,IAAI,CAACrB,MAAM,CAACqB,QAAQ,IAAI,IAAI,CAACrB,MAAM,CAACqB,QAAQ,CAACC,MAAM,IAAI,CAAC,EAAC,C,CAE3D,MACG;MACF,IAAI,CAACpB,iBAAiB,GAAG,IAAI;;EAEjC;CAED;AAlDYN,4BAA4B,GAAA2B,UAAA,EANxC7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,C,EAEW9B,4BAA4B,CAkDxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}